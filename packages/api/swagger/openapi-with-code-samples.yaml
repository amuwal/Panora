openapi: 3.0.0
paths:
  /:
    get:
      operationId: hello
      summary: ''
      parameters: []
      responses:
        '200':
          description: Returns a greeting message
          content:
            text/plain:
              schema:
                type: string
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: hello
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hello()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: hello
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()

                ctx := context.Background()
                res, err := s.Hello(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.String != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: hello
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hello()\n\nif ! res.string.nil?\n  # handle response\nend"
  /health:
    get:
      operationId: health
      summary: ''
      parameters: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: number
                example: 200
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: health
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.health()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: health
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()

                ctx := context.Background()
                res, err := s.Health(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Number != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: health
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.health()\n\nif ! res.number.nil?\n  # handle response\nend"
  /webhooks:
    get:
      operationId: listWebhooks
      summary: List webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
      tags: &ref_0
        - webhooks
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhooks.list();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listWebhooks
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listWebhooks
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()

                ctx := context.Background()
                res, err := s.Webhooks.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listWebhooks
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.webhooks.list()\n\nif ! res.webhook_responses.nil?\n  # handle response\nend"
    post:
      operationId: createWebhookPublic
      summary: Add webhook metadata
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: createWebhookPublic
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhooks.create({
                url: "http://limp-pastry.org",
                scope: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createWebhookPublic
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.create(request={
                "url": "http://limp-pastry.org",
                "scope": [
                    "<value>",
                ],
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createWebhookPublic
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.WebhookDto{
                    URL: "http://limp-pastry.org",
                    Scope: []string{
                        "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Webhooks.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createWebhookPublic
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::WebhookDto.new(\n  url: \"http://limp-pastry.org\",\n  scope: [\n    \"<value>\",\n  ],\n)\n    \nres = s.webhooks.create(req)\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/{id}:
    delete:
      operationId: delete
      summary: Delete Webhook
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhooks.delete({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: delete
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.id.delete(id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: delete
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhooks.{id}.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: delete
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.webhooks_id.delete(id=\"<value>\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
    put:
      operationId: updateStatus
      summary: Update webhook status
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhooks.updateStatus({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: updateStatus
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.id.update_status(id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: updateStatus
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhooks.{id}.UpdateStatus(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: updateStatus
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.webhooks_id.update_status(id=\"<value>\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/verifyEvent:
    post:
      operationId: verifyEvent
      summary: Verify payload signature of the webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerificationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    additionalProperties: true
                    description: Dynamic event payload
        '201':
          description: ''
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhooks.verifyEvent({
                payload: {
                  "key": "<value>",
                },
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: verifyEvent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.webhooks.verifyevent.verify_event(request={
                "payload": {},
                "signature": "<value>",
                "secret": "<value>",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: verifyEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.SignatureVerificationDto{
                    Payload: components.Payload{},
                    Signature: "<value>",
                    Secret: "<value>",
                }
                ctx := context.Background()
                res, err := s.Webhooks.Verifyevent.VerifyEvent(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EventPayload != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: verifyEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::SignatureVerificationDto.new(\n  payload: ::OpenApiSDK::Shared::Payload.new(),\n  signature: \"<value>\",\n  secret: \"<value>\",\n)\n    \nres = s.webhooks_verifyevent.verify_event(req)\n\nif ! res.event_payload.nil?\n  # handle response\nend"
  /ticketing/tickets:
    get:
      operationId: listTicketingTicket
      summary: List  Tickets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: &ref_1
        - ticketing/tickets
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_tickets.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingTicket
      summary: Create Tickets
      description: Create Tickets in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingTicketInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                unifiedTicketingTicketInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.create(x_connection_token="<value>", unified_ticketing_ticket_input={
                "name": "<value>",
                "description": "Multi-tiered human-resource model",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedTicketingTicketInput := components.UnifiedTicketingTicketInput{
                    Name: "<value>",
                    Description: "Multi-tiered human-resource model",
                    FieldMappings: components.UnifiedTicketingTicketInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Create(ctx, xConnectionToken, unifiedTicketingTicketInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_tickets.create(x_connection_token=\"<value>\", unified_ticketing_ticket_input=::OpenApiSDK::Shared::UnifiedTicketingTicketInput.new(\n    name: \"<value>\",\n    description: \"Multi-tiered human-resource model\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/tickets/{id}:
    get:
      operationId: retrieveTicketingTicket
      summary: Retrieve Tickets
      description: Retrieve Tickets from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `ticket` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tickets.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_tickets.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/users:
    get:
      operationId: listTicketingUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: &ref_2
        - ticketing/users
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_users.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/users/{id}:
    get:
      operationId: retrieveTicketingUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: *ref_2
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_users.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_user_output.nil?\n  # handle response\nend"
  /ticketing/accounts:
    get:
      operationId: listTicketingAccount
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: &ref_3
        - ticketing/accounts
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.accounts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Accounts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_accounts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/accounts/{id}:
    get:
      operationId: retrieveTicketingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: *ref_3
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Accounts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_accounts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_account_output.nil?\n  # handle response\nend"
  /ticketing/contacts:
    get:
      operationId: listTicketingContacts
      summary: List all Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: &ref_4
        - ticketing/contacts
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingContacts
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_contacts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/contacts/{id}:
    get:
      operationId: retrieveTicketingContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: *ref_4
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_contacts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /sync/status/{vertical}:
    get:
      operationId: status
      summary: Retrieve sync status of a certain vertical
      parameters:
        - name: vertical
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_5
        - sync
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: status
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.sync.status({
                vertical: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: status
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.sync.status(vertical="<value>")

            # Use the SDK ...
        - lang: go
          label: status
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var vertical string = "<value>"
                ctx := context.Background()
                res, err := s.Sync.Status(ctx, vertical)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: status
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.sync.status(vertical=\"<value>\")\n\nif res.status_code == 200\n  # handle response\nend"
  /sync/resync:
    post:
      operationId: resync
      summary: Resync common objects across a vertical
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResyncStatusDto'
      tags: *ref_5
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: resync
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.sync.resync()

            # Use the SDK ...
        - lang: go
          label: resync
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()

                ctx := context.Background()
                res, err := s.Sync.Resync(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: resync
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.sync.resync()\n\nif res.status_code == 200\n  # handle response\nend"
  /crm/companies:
    get:
      operationId: listCrmCompany
      summary: List Companies
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: &ref_6
        - crm/companies
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Companies.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_companies.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmCompany
      summary: Create Companies
      description: Create Companies in any supported CRM software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmCompanyInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_6
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                unifiedCrmCompanyInput: {
                  name: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.create(x_connection_token="<value>", unified_crm_company_input={
                "name": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmCompanyInput := components.UnifiedCrmCompanyInput{
                    Name: "<value>",
                    FieldMappings: components.UnifiedCrmCompanyInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Companies.Create(ctx, xConnectionToken, unifiedCrmCompanyInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_companies.create(x_connection_token=\"<value>\", unified_crm_company_input=::OpenApiSDK::Shared::UnifiedCrmCompanyInput.new(\n    name: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmCompanyInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/companies/{id}:
    get:
      operationId: retrieveCrmCompany
      summary: Retrieve Companies
      description: Retrieve Companies from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the company you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_6
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.companies.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Companies.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_companies.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/contacts:
    get:
      operationId: listCrmContacts
      summary: List CRM Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: &ref_7
        - crm/contacts
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmContacts
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_contacts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmContact
      summary: Create Contacts
      description: Create Contacts in any supported CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_7
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                unifiedCrmContactInput: {
                  firstName: "Jed",
                  lastName: "Kuhn",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.create(x_connection_token="<value>", unified_crm_contact_input={
                "first_name": "Jed",
                "last_name": "Kuhn",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmContactInput := components.UnifiedCrmContactInput{
                    FirstName: "Jed",
                    LastName: "Kuhn",
                    FieldMappings: components.UnifiedCrmContactInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Contacts.Create(ctx, xConnectionToken, unifiedCrmContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_contacts.create(x_connection_token=\"<value>\", unified_crm_contact_input=::OpenApiSDK::Shared::UnifiedCrmContactInput.new(\n    first_name: \"Jed\",\n    last_name: \"Kuhn\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmContactInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/contacts/{id}:
    get:
      operationId: retrieveCrmContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `contact` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_7
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_contacts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/deals:
    get:
      operationId: listCrmDeals
      summary: List  Deals
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: &ref_8
        - crm/deals
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmDeals
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmDeals
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Deals.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmDeals
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_deals.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmDeal
      summary: Create Deals
      description: Create Deals in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmDealInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_8
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                  amount: 8592.13,
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.create(x_connection_token="<value>", unified_crm_deal_input={
                "name": "<value>",
                "description": "Multi-tiered human-resource model",
                "amount": 8592.13,
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmDealInput := components.UnifiedCrmDealInput{
                    Name: "<value>",
                    Description: "Multi-tiered human-resource model",
                    Amount: 8592.13,
                    FieldMappings: components.UnifiedCrmDealInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Deals.Create(ctx, xConnectionToken, unifiedCrmDealInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_deals.create(x_connection_token=\"<value>\", unified_crm_deal_input=::OpenApiSDK::Shared::UnifiedCrmDealInput.new(\n    name: \"<value>\",\n    description: \"Multi-tiered human-resource model\",\n    amount: 8592.13,\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmDealInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/deals/{id}:
    get:
      operationId: retrieveCrmDeal
      summary: Retrieve Deals
      description: Retrieve Deals from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the deal you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_8
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.deals.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Deals.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_deals.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/engagements:
    get:
      operationId: listCrmEngagements
      summary: List  Engagements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: &ref_9
        - crm/engagements
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmEngagements
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmEngagements
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Engagements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmEngagements
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_engagements.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmEngagement
      summary: Create Engagements
      description: Create Engagements in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmEngagementInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_9
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                unifiedCrmEngagementInput: {
                  type: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.create(x_connection_token="<value>", unified_crm_engagement_input={
                "type": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmEngagementInput := components.UnifiedCrmEngagementInput{
                    Type: "<value>",
                    FieldMappings: components.UnifiedCrmEngagementInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Engagements.Create(ctx, xConnectionToken, unifiedCrmEngagementInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_engagements.create(x_connection_token=\"<value>\", unified_crm_engagement_input=::OpenApiSDK::Shared::UnifiedCrmEngagementInput.new(\n    type: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmEngagementInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/engagements/{id}:
    get:
      operationId: retrieveCrmEngagement
      summary: Retrieve Engagements
      description: Retrieve Engagements from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the engagement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_9
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.engagements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Engagements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_engagements.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/notes:
    get:
      operationId: listCrmNote
      summary: List  Notes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: &ref_10
        - crm/notes
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Notes.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_notes.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmNote
      summary: Create Notes
      description: Create Notes in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmNoteInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_10
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                unifiedCrmNoteInput: {
                  content: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.create(x_connection_token="<value>", unified_crm_note_input={
                "content": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmNoteInput := components.UnifiedCrmNoteInput{
                    Content: "<value>",
                    FieldMappings: components.UnifiedCrmNoteInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Notes.Create(ctx, xConnectionToken, unifiedCrmNoteInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_notes.create(x_connection_token=\"<value>\", unified_crm_note_input=::OpenApiSDK::Shared::UnifiedCrmNoteInput.new(\n    content: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmNoteInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/notes/{id}:
    get:
      operationId: retrieveCrmNote
      summary: Retrieve Notes
      description: Retrieve Notes from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the note you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_10
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.notes.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Notes.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_notes.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/stages:
    get:
      operationId: listCrmStages
      summary: List  Stages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: &ref_11
        - crm/stages
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmStages
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.stages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmStages
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Stages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmStages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_stages.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/stages/{id}:
    get:
      operationId: retrieveCrmStage
      summary: Retrieve Stages
      description: Retrieve Stages from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the stage you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: *ref_11
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.stages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Stages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmStageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_stages.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_stage_output.nil?\n  # handle response\nend"
  /crm/tasks:
    get:
      operationId: listCrmTask
      summary: List  Tasks
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: &ref_12
        - crm/tasks
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Tasks.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_tasks.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmTask
      summary: Create Tasks
      description: Create Tasks in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmTaskInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_12
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "<value>",
                  content: "<value>",
                  status: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.create(x_connection_token="<value>", unified_crm_task_input={
                "subject": "<value>",
                "content": "<value>",
                "status": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedCrmTaskInput := components.UnifiedCrmTaskInput{
                    Subject: "<value>",
                    Content: "<value>",
                    Status: "<value>",
                    FieldMappings: components.UnifiedCrmTaskInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Tasks.Create(ctx, xConnectionToken, unifiedCrmTaskInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_tasks.create(x_connection_token=\"<value>\", unified_crm_task_input=::OpenApiSDK::Shared::UnifiedCrmTaskInput.new(\n    subject: \"<value>\",\n    content: \"<value>\",\n    status: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedCrmTaskInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/tasks/{id}:
    get:
      operationId: retrieveCrmTask
      summary: Retrieve Tasks
      description: Retrieve Tasks from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the task you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_12
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.tasks.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Tasks.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_tasks.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/users:
    get:
      operationId: listCrmUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: &ref_13
        - crm/users
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listCrmUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listCrmUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listCrmUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_users.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/users/{id}:
    get:
      operationId: retrieveCrmUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: *ref_13
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.crm.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.crm_users.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_crm_user_output.nil?\n  # handle response\nend"
  /ticketing/collections:
    get:
      operationId: listTicketingCollections
      summary: List  Collections
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingCollectionOutput
      tags: &ref_14
        - ticketing/collections
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingCollections
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.collections.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingCollections
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Collections.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingCollections
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_collections.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/collections/{id}:
    get:
      operationId: retrieveCollection
      summary: Retrieve Collections
      description: Retrieve Collections from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the collection you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
      tags: *ref_14
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCollection
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.collections.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCollection
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Collections.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCollectionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCollection
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_collections.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_collection_output.nil?\n  # handle response\nend"
  /ticketing/comments:
    get:
      operationId: listTicketingComments
      summary: List  Comments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: &ref_15
        - ticketing/comments
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingComments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingComments
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Comments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingComments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_comments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingComment
      summary: Create Comments
      description: Create Comments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingCommentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_15
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.create(x_connection_token="<value>", unified_ticketing_comment_input={
                "body": "<value>",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedTicketingCommentInput := components.UnifiedTicketingCommentInput{
                    Body: "<value>",
                }
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Create(ctx, xConnectionToken, unifiedTicketingCommentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCommentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_comments.create(x_connection_token=\"<value>\", unified_ticketing_comment_input=::OpenApiSDK::Shared::UnifiedTicketingCommentInput.new(\n    body: \"<value>\",\n  ), remote_data=false)\n\nif ! res.unified_ticketing_comment_output.nil?\n  # handle response\nend"
  /ticketing/comments/{id}:
    get:
      operationId: retrieveTicketingComment
      summary: Retrieve Comments
      description: Retrieve Comments from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `comment` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_15
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.comments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_comments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags:
    get:
      operationId: listTicketingTags
      summary: List  Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: &ref_16
        - ticketing/tags
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingTags
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tags.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingTags
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tags.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingTags
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_tags.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags/{id}:
    get:
      operationId: retrieveTicketingTag
      summary: Retrieve Tags
      description: Retrieve Tags from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: *ref_16
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTag
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.tags.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tags.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTagOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTag
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_tags.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_tag_output.nil?\n  # handle response\nend"
  /ticketing/teams:
    get:
      operationId: listTicketingTeams
      summary: List  Teams
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: &ref_17
        - ticketing/teams
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingTeams
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.teams.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingTeams
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Teams.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingTeams
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_teams.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/teams/{id}:
    get:
      operationId: retrieveTicketingTeam
      summary: Retrieve Teams
      description: Retrieve Teams from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the team you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: *ref_17
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTeam
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.teams.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTeam
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Teams.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTeamOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTeam
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_teams.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_team_output.nil?\n  # handle response\nend"
  /linked_users:
    post:
      operationId: createLinkedUser
      summary: Create Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: &ref_18
        - linkedUsers
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "<value>",
                alias: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.create(request={
                "linked_user_origin_id": "<value>",
                "alias": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: createLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.CreateLinkedUserDto{
                    LinkedUserOriginID: "<value>",
                    Alias: "<value>",
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::CreateLinkedUserDto.new(\n  linked_user_origin_id: \"<value>\",\n  alias_: \"<value>\",\n)\n    \nres = s.linked_users.create(req)\n\nif res.status_code == 200\n  # handle response\nend"
    get:
      operationId: listLinkedUsers
      summary: List Linked Users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listLinkedUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.list()

            # Use the SDK ...
        - lang: go
          label: listLinkedUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()

                ctx := context.Background()
                res, err := s.LinkedUsers.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listLinkedUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.linked_users.list()\n\nif res.status_code == 200\n  # handle response\nend"
  /linked_users/batch:
    post:
      operationId: importBatch
      summary: Add Batch Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linked_users.batch
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.batch.importBatch({
                linkedUserOriginIds: [
                  "<value>",
                ],
                alias: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: importBatch
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.batch.import_batch(request={
                "linked_user_origin_ids": [
                    "<value>",
                ],
                "alias": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: importBatch
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.CreateBatchLinkedUserDto{
                    LinkedUserOriginIds: []string{
                        "<value>",
                    },
                    Alias: "<value>",
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.Batch.ImportBatch(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: importBatch
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::CreateBatchLinkedUserDto.new(\n  linked_user_origin_ids: [\n    \"<value>\",\n  ],\n  alias_: \"<value>\",\n)\n    \nres = s.linked_users_batch.import_batch(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /linked_users/single:
    get:
      operationId: retrieveLinkedUser
      summary: Retrieve Linked Users
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linked_users.single
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.single.retrieve({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.single.retrieve(id="<value>")

            # Use the SDK ...
        - lang: go
          label: retrieveLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.LinkedUsers.Single.Retrieve(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.linked_users_single.retrieve(id=\"<value>\")\n\nif res.status_code == 200\n  # handle response\nend"
  /linked_users/fromRemoteId:
    get:
      operationId: remoteId
      summary: Retrieve a Linked User From A Remote Id
      parameters:
        - name: remoteId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linked_users.fromremoteid
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.fromremoteid.remoteId({
                remoteId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: remoteId
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.linked_users.fromremoteid.remote_id(remote_id="<value>")

            # Use the SDK ...
        - lang: go
          label: remoteId
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var remoteID string = "<value>"
                ctx := context.Background()
                res, err := s.LinkedUsers.Fromremoteid.RemoteID(ctx, remoteID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: remoteId
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.linked_users_fromremoteid.remote_id(remote_id=\"<value>\")\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/define:
    post:
      operationId: definitions
      summary: Define target Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefineTargetFieldDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: &ref_19
        - fieldMappings
      x-speakeasy-group: field_mappings.define
      x-codeSamples:
        - lang: typescript
          label: definitions
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.define.definitions({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Universal heuristic matrices",
                dataType: "decimal",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: definitions
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.define.definitions(request={
                "object_type_owner": "<value>",
                "name": "<value>",
                "description": "Universal heuristic matrices",
                "data_type": "decimal",
            })

            # Use the SDK ...
        - lang: go
          label: definitions
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.DefineTargetFieldDto{
                    ObjectTypeOwner: "<value>",
                    Name: "<value>",
                    Description: "Universal heuristic matrices",
                    DataType: "decimal",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Define.Definitions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: definitions
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::DefineTargetFieldDto.new(\n  object_type_owner: \"<value>\",\n  name: \"<value>\",\n  description: \"Universal heuristic matrices\",\n  data_type: \"decimal\",\n)\n    \nres = s.field_mappings_define.definitions(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings:
    post:
      operationId: defineCustomField
      summary: Create Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_19
      x-codeSamples:
        - lang: typescript
          label: defineCustomField
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.defineCustomField({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Balanced multimedia policy",
                dataType: "point",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: defineCustomField
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.define_custom_field(request={
                "object_type_owner": "<value>",
                "name": "<value>",
                "description": "Balanced multimedia policy",
                "data_type": "point",
                "source_custom_field_id": "<value>",
                "source_provider": "<value>",
                "linked_user_id": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: defineCustomField
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.CustomFieldCreateDto{
                    ObjectTypeOwner: "<value>",
                    Name: "<value>",
                    Description: "Balanced multimedia policy",
                    DataType: "point",
                    SourceCustomFieldID: "<value>",
                    SourceProvider: "<value>",
                    LinkedUserID: "<value>",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.DefineCustomField(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: defineCustomField
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::CustomFieldCreateDto.new(\n  object_type_owner: \"<value>\",\n  name: \"<value>\",\n  description: \"Balanced multimedia policy\",\n  data_type: \"point\",\n  source_custom_field_id: \"<value>\",\n  source_provider: \"<value>\",\n  linked_user_id: \"<value>\",\n)\n    \nres = s.field_mappings.define_custom_field(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/map:
    post:
      operationId: map
      summary: Map Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapFieldToProviderDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_19
      x-speakeasy-group: field_mappings.map
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.map.map({
                attributeId: "<value>",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: map
          source: |-
            from panora_sdk import Panora

            s = Panora()


            s.field_mappings.map.map(request={
                "attribute_id": "<value>",
                "source_custom_field_id": "<value>",
                "source_provider": "<value>",
                "linked_user_id": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: map
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                request := components.MapFieldToProviderDto{
                    AttributeID: "<value>",
                    SourceCustomFieldID: "<value>",
                    SourceProvider: "<value>",
                    LinkedUserID: "<value>",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Map.Map(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: map
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n\nreq = ::OpenApiSDK::Shared::MapFieldToProviderDto.new(\n  attribute_id: \"<value>\",\n  source_custom_field_id: \"<value>\",\n  source_provider: \"<value>\",\n  linked_user_id: \"<value>\",\n)\n    \nres = s.field_mappings_map.map(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /passthrough:
    post:
      operationId: request
      summary: Make a passthrough request
      parameters:
        - name: integrationId
          required: true
          in: query
          schema:
            type: string
        - name: linkedUserId
          required: true
          in: query
          schema:
            type: string
        - name: vertical
          required: true
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassThroughRequestDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassThroughResponse'
      tags:
        - passthrough
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { Method } from "@panora/sdk/models/components";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.passthrough.request({
                integrationId: "<value>",
                linkedUserId: "<value>",
                vertical: "<value>",
                passThroughRequestDto: {
                  method: Method.Get,
                  path: "/dev",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: request
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora()


            res = s.passthrough.request(integration_id="<value>", linked_user_id="<value>", vertical="<value>", pass_through_request_dto={
                "method": panora_sdk.Method.GET,
                "path": "/dev",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: request
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var integrationID string = "<value>"

                var linkedUserID string = "<value>"

                var vertical string = "<value>"

                passThroughRequestDto := components.PassThroughRequestDto{
                    Method: components.MethodGet,
                    Path: "/dev",
                }
                ctx := context.Background()
                res, err := s.Passthrough.Request(ctx, integrationID, linkedUserID, vertical, passThroughRequestDto)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PassThroughResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: request
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.passthrough.request(integration_id=\"<value>\", linked_user_id=\"<value>\", vertical=\"<value>\", pass_through_request_dto=::OpenApiSDK::Shared::PassThroughRequestDto.new(\n    method: ::OpenApiSDK::Shared::Method::GET,\n    path: \"/dev\",\n  ))\n\nif ! res.pass_through_response.nil?\n  # handle response\nend"
  /hris/bankinfos:
    get:
      operationId: listHrisBankinfo
      summary: List  Bankinfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: &ref_20
        - hris/bankinfos
      x-speakeasy-group: hris.bankinfos
      x-codeSamples:
        - lang: typescript
          label: listHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.bankinfos.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisBankinfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.bankinfos.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisBankinfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Bankinfos.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisBankinfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_bankinfos.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/bankinfos/{id}:
    get:
      operationId: retrieveHrisBankinfo
      summary: Retrieve Bank Infos
      description: Retrieve Bank Infos from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the bankinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: *ref_20
      x-speakeasy-group: hris.bankinfos
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.bankinfos.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisBankinfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.bankinfos.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisBankinfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Bankinfos.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBankinfoOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisBankinfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_bankinfos.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_bankinfo_output.nil?\n  # handle response\nend"
  /hris/benefits:
    get:
      operationId: listHrisBenefit
      summary: List  Benefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: &ref_21
        - hris/benefits
      x-speakeasy-group: hris.benefits
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.benefits.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.benefits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Benefits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_benefits.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/benefits/{id}:
    get:
      operationId: retrieveHrisBenefit
      summary: Retrieve Benefits
      description: Retrieve Benefits from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the benefit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: *ref_21
      x-speakeasy-group: hris.benefits
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.benefits.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.benefits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Benefits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBenefitOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_benefits.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_benefit_output.nil?\n  # handle response\nend"
  /hris/companies:
    get:
      operationId: listHrisCompanys
      summary: List  Companys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisCompanyOutput'
      tags:
        - hris/companies
      x-speakeasy-group: hris.companies
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.companies.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisCompanys
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.companies.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisCompanys
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Companies.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisCompanys
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_companies.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/dependents:
    get:
      operationId: listHrisDependents
      summary: List  Dependents
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: &ref_22
        - hris/dependents
      x-speakeasy-group: hris.dependents
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.dependents.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisDependents
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.dependents.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisDependents
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Dependents.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisDependents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_dependents.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/dependents/{id}:
    get:
      operationId: retrieveHrisDependent
      summary: Retrieve Dependents
      description: Retrieve Dependents from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the dependent you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: *ref_22
      x-speakeasy-group: hris.dependents
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.dependents.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisDependent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.dependents.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisDependent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Dependents.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisDependentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisDependent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_dependents.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_dependent_output.nil?\n  # handle response\nend"
  /hris/employeepayrollruns:
    get:
      operationId: listHrisEmployeePayrollRun
      summary: List  EmployeePayrollRuns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployeepayrollrunOutput
      tags: &ref_23
        - hris/employeepayrollruns
      x-speakeasy-group: hris.employeepayrollruns
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employeepayrollruns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisEmployeePayrollRun
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employeepayrollruns.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employeepayrollruns/{id}:
    get:
      operationId: retrieveHrisEmployeePayrollRun
      summary: Retrieve Employee Payroll Runs
      description: Retrieve Employee Payroll Runs from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employeepayrollrun you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeepayrollrunOutput'
      tags: *ref_23
      x-speakeasy-group: hris.employeepayrollruns
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employeepayrollruns.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeepayrollrunOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployeePayrollRun
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employeepayrollruns.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_employeepayrollrun_output.nil?\n  # handle response\nend"
  /hris/employees:
    get:
      operationId: listHrisEmployee
      summary: List  Employees
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: &ref_24
        - hris/employees
      x-speakeasy-group: hris.employees
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employees.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employees.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisEmployee
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employees.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createHrisEmployee
      summary: Create Employees
      description: Create Employees in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisEmployeeInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_24
      x-speakeasy-group: hris.employees
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employees.create({
                xConnectionToken: "<value>",
                unifiedHrisEmployeeInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.create(x_connection_token="<value>", unified_hris_employee_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedHrisEmployeeInput := components.UnifiedHrisEmployeeInput{}
                ctx := context.Background()
                res, err := s.Hris.Employees.Create(ctx, xConnectionToken, unifiedHrisEmployeeInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createHrisEmployee
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employees.create(x_connection_token=\"<value>\", unified_hris_employee_input=::OpenApiSDK::Shared::UnifiedHrisEmployeeInput.new(), remote_data=false)\n\nif ! res.unified_hris_employee_output.nil?\n  # handle response\nend"
  /hris/employees/{id}:
    get:
      operationId: retrieveHrisEmployee
      summary: Retrieven Employees
      description: Retrieven Employees from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employee you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_24
      x-speakeasy-group: hris.employees
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employees.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employees.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employees.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployee
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employees.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_employee_output.nil?\n  # handle response\nend"
  /hris/employerbenefits:
    get:
      operationId: listHrisEmployerBenefit
      summary: List  EmployerBenefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployerbenefitOutput
      tags: &ref_25
        - hris/employerbenefits
      x-speakeasy-group: hris.employerbenefits
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employerbenefits.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employerbenefits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisEmployerBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisEmployerBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employerbenefits.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employerbenefits/{id}:
    get:
      operationId: retrieveHrisEmployerBenefit
      summary: Retrieve Employer Benefits
      description: Retrieve Employer Benefits from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employerbenefit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployerbenefitOutput'
      tags: *ref_25
      x-speakeasy-group: hris.employerbenefits
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employerbenefits.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employerbenefits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployerBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployerbenefitOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployerBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employerbenefits.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_employerbenefit_output.nil?\n  # handle response\nend"
  /hris/employments:
    get:
      operationId: listHrisEmployment
      summary: List  Employments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: &ref_26
        - hris/employments
      x-speakeasy-group: hris.employments
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisEmployment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisEmployment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employments/{id}:
    get:
      operationId: retrieveHrisEmployment
      summary: Retrieve Employments
      description: Retrieve Employments from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: *ref_26
      x-speakeasy-group: hris.employments
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.employments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmploymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_employments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_employment_output.nil?\n  # handle response\nend"
  /hris/groups:
    get:
      operationId: listHrisGroup
      summary: List  Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: &ref_27
        - hris/groups
      x-speakeasy-group: hris.groups
      x-codeSamples:
        - lang: typescript
          label: listHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.groups.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.groups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Groups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_groups.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/groups/{id}:
    get:
      operationId: retrieveHrisGroup
      summary: Retrieve Groups
      description: Retrieve Groups from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the group you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: *ref_27
      x-speakeasy-group: hris.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.groups.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.groups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Groups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisGroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_groups.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_group_output.nil?\n  # handle response\nend"
  /hris/locations:
    get:
      operationId: listHrisLocation
      summary: List  Locations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: &ref_28
        - hris/locations
      x-speakeasy-group: hris.locations
      x-codeSamples:
        - lang: typescript
          label: listHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.locations.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.locations.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisLocation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Locations.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisLocation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_locations.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/locations/{id}:
    get:
      operationId: retrieveHrisLocation
      summary: Retrieve Locations
      description: Retrieve Locations from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the location you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: *ref_28
      x-speakeasy-group: hris.locations
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.locations.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.locations.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisLocation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Locations.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisLocationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisLocation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_locations.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_location_output.nil?\n  # handle response\nend"
  /hris/paygroups:
    get:
      operationId: listHrisPaygroup
      summary: List  PayGroups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: &ref_29
        - hris/paygroups
      x-speakeasy-group: hris.paygroups
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.paygroups.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.paygroups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisPaygroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Paygroups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisPaygroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_paygroups.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/paygroups/{id}:
    get:
      operationId: retrieveHrisPaygroup
      summary: Retrieve Pay Groups
      description: Retrieve Pay Groups from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the paygroup you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: *ref_29
      x-speakeasy-group: hris.paygroups
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.paygroups.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.paygroups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisPaygroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Paygroups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPaygroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisPaygroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_paygroups.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_paygroup_output.nil?\n  # handle response\nend"
  /hris/payrollruns:
    get:
      operationId: listHrisPayrollRuns
      summary: List  PayrollRuns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPayrollrunOutput'
      tags:
        - hris/payrollruns
      x-speakeasy-group: hris.payrollruns
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.payrollruns.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisPayrollRuns
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.payrollruns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisPayrollRuns
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Payrollruns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisPayrollRuns
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_payrollruns.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/timeoffs:
    get:
      operationId: listHrisTimeoffs
      summary: List  Timeoffs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: &ref_30
        - hris/timeoffs
      x-speakeasy-group: hris.timeoffs
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffs.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisTimeoffs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisTimeoffs
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisTimeoffs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_timeoffs.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createHrisTimeoff
      summary: Create Timeoffs
      description: Create Timeoffs in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisTimeoffInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_30
      x-speakeasy-group: hris.timeoffs
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffs.create({
                xConnectionToken: "<value>",
                unifiedHrisTimeoffInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.create(x_connection_token="<value>", unified_hris_timeoff_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedHrisTimeoffInput := components.UnifiedHrisTimeoffInput{}
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Create(ctx, xConnectionToken, unifiedHrisTimeoffInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createHrisTimeoff
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_timeoffs.create(x_connection_token=\"<value>\", unified_hris_timeoff_input=::OpenApiSDK::Shared::UnifiedHrisTimeoffInput.new(), remote_data=false)\n\nif ! res.unified_hris_timeoff_output.nil?\n  # handle response\nend"
  /hris/timeoffs/{id}:
    get:
      operationId: retrieveHrisTimeoff
      summary: Retrieve Timeoffs
      description: Retrieve Timeoffs from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the timeoff you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_30
      x-speakeasy-group: hris.timeoffs
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisTimeoff
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_timeoffs.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_timeoff_output.nil?\n  # handle response\nend"
  /hris/timeoffbalances:
    get:
      operationId: listHrisTimeoffbalance
      summary: List  TimeoffBalances
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: &ref_31
        - hris/timeoffbalances
      x-speakeasy-group: hris.timeoffbalances
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffbalances.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listHrisTimeoffbalance
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listHrisTimeoffbalance
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_timeoffbalances.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/timeoffbalances/{id}:
    get:
      operationId: retrieveHrisTimeoffbalance
      summary: Retrieve Time off Balances
      description: Retrieve Time off Balances from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the timeoffbalance you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: *ref_31
      x-speakeasy-group: hris.timeoffbalances
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.hris.timeoffbalances.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisTimeoffbalance
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffbalanceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisTimeoffbalance
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.hris_timeoffbalances.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_hris_timeoffbalance_output.nil?\n  # handle response\nend"
  /marketingautomation/actions:
    get:
      operationId: listMarketingautomationAction
      summary: List  Actions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationActionOutput
      tags: &ref_32
        - marketingautomation/actions
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.actions.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_actions.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAction
      summary: Create Action
      description: Create a action in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationActionInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_32
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.actions.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.create(x_connection_token="<value>", unified_marketingautomation_action_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationActionInput := components.UnifiedMarketingautomationActionInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Create(ctx, xConnectionToken, unifiedMarketingautomationActionInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_actions.create(x_connection_token=\"<value>\", unified_marketingautomation_action_input=::OpenApiSDK::Shared::UnifiedMarketingautomationActionInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/actions/{id}:
    get:
      operationId: retrieveMarketingautomationAction
      summary: Retrieve Actions
      description: Retrieve Actions from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the action you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_32
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.actions.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.actions.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_actions.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/automations:
    get:
      operationId: listMarketingautomationAutomation
      summary: List  Automations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: &ref_33
        - marketingautomation/automations
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automations.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_automations.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAutomation
      summary: Create Automation
      description: Create a automation in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationAutomationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_33
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automations.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.create(x_connection_token="<value>", unified_marketingautomation_automation_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationAutomationInput := components.UnifiedMarketingautomationAutomationInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Create(ctx, xConnectionToken, unifiedMarketingautomationAutomationInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_automations.create(x_connection_token=\"<value>\", unified_marketingautomation_automation_input=::OpenApiSDK::Shared::UnifiedMarketingautomationAutomationInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/automations/{id}:
    get:
      operationId: retrieveMarketingautomationAutomation
      summary: Retrieve Automations
      description: Retrieve Automations from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the automation you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_33
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automations.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.automations.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_automations.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns:
    get:
      operationId: listMarketingautomationCampaign
      summary: List  Campaigns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: &ref_34
        - marketingautomation/campaigns
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_campaigns.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationCampaign
      summary: Create Campaign
      description: Create a campaign in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationCampaignInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: *ref_34
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.create(x_connection_token="<value>", unified_marketingautomation_campaign_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationCampaignInput := components.UnifiedMarketingautomationCampaignInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Create(ctx, xConnectionToken, unifiedMarketingautomationCampaignInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_campaigns.create(x_connection_token=\"<value>\", unified_marketingautomation_campaign_input=::OpenApiSDK::Shared::UnifiedMarketingautomationCampaignInput.new(), remote_data=false)\n\nif ! res.unified_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns/{id}:
    get:
      operationId: retrieveMarketingautomationCampaign
      summary: Retrieve Campaigns
      description: Retrieve Campaigns from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the campaign you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: *ref_34
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.campaigns.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_campaigns.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts:
    get:
      operationId: listMarketingAutomationContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationContactOutput
      tags: &ref_35
        - marketingautomation/contacts
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingAutomationContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingAutomationContacts
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingAutomationContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_contacts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingAutomationContact
      summary: Create Contact
      description: Create a contact in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_35
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.create(x_connection_token="<value>", unified_marketingautomation_contact_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationContactInput := components.UnifiedMarketingautomationContactInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Create(ctx, xConnectionToken, unifiedMarketingautomationContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_contacts.create(x_connection_token=\"<value>\", unified_marketingautomation_contact_input=::OpenApiSDK::Shared::UnifiedMarketingautomationContactInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts/{id}:
    get:
      operationId: retrieveMarketingAutomationContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_35
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_contacts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/emails:
    get:
      operationId: listMarketingautomationEmails
      summary: List  Emails
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEmailOutput
      tags: &ref_36
        - marketingautomation/emails
      x-speakeasy-group: marketingautomation.emails
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.emails.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationEmails
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.emails.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationEmails
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationEmails
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_emails.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/emails/{id}:
    get:
      operationId: retrieveMarketingautomationEmail
      summary: Retrieve Emails
      description: Retrieve Emails from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the email you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEmailOutput'
      tags: *ref_36
      x-speakeasy-group: marketingautomation.emails
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.emails.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEmail
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.emails.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEmail
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEmailOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEmail
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_emails.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_email_output.nil?\n  # handle response\nend"
  /marketingautomation/events:
    get:
      operationId: listMarketingAutomationEvents
      summary: List  Events
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEventOutput
      tags: &ref_37
        - marketingautomation/events
      x-speakeasy-group: marketingautomation.events
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.events.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingAutomationEvents
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.events.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingAutomationEvents
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Events.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingAutomationEvents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_events.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/events/{id}:
    get:
      operationId: retrieveMarketingautomationEvent
      summary: Retrieve Events
      description: Retrieve Events from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the event you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEventOutput'
      tags: *ref_37
      x-speakeasy-group: marketingautomation.events
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.events.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEvent
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.events.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Events.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEventOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_events.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_event_output.nil?\n  # handle response\nend"
  /marketingautomation/lists:
    get:
      operationId: listMarketingautomationLists
      summary: List  Lists
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationListOutput
      tags: &ref_38
        - marketingautomation/lists
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.lists.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationLists
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationLists
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationLists
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_lists.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationList
      summary: Create Lists
      description: Create Lists in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationListInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_38
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.lists.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.create(x_connection_token="<value>", unified_marketingautomation_list_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationListInput := components.UnifiedMarketingautomationListInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Create(ctx, xConnectionToken, unifiedMarketingautomationListInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_lists.create(x_connection_token=\"<value>\", unified_marketingautomation_list_input=::OpenApiSDK::Shared::UnifiedMarketingautomationListInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/lists/{id}:
    get:
      operationId: retrieveMarketingautomationList
      summary: Retrieve Lists
      description: Retrieve Lists from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the list you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_38
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.lists.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.lists.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_lists.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/messages:
    get:
      operationId: listMarketingautomationMessages
      summary: List  Messages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationMessageOutput
      tags: &ref_39
        - marketingautomation/messages
      x-speakeasy-group: marketingautomation.messages
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.messages.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationMessages
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.messages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationMessages
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationMessages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_messages.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/messages/{id}:
    get:
      operationId: retrieveMarketingautomationMessage
      summary: Retrieve Messages
      description: Retrieve Messages from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the message you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationMessageOutput'
      tags: *ref_39
      x-speakeasy-group: marketingautomation.messages
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.messages.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationMessage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.messages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationMessage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationMessageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationMessage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_messages.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_message_output.nil?\n  # handle response\nend"
  /marketingautomation/templates:
    get:
      operationId: listMarketingautomationTemplates
      summary: List  Templates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationTemplateOutput
      tags: &ref_40
        - marketingautomation/templates
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.templates.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingautomationTemplates
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingautomationTemplates
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingautomationTemplates
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_templates.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationTemplate
      summary: Create Template
      description: Create a template in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationTemplateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_40
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.templates.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.create(x_connection_token="<value>", unified_marketingautomation_template_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationTemplateInput := components.UnifiedMarketingautomationTemplateInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Create(ctx, xConnectionToken, unifiedMarketingautomationTemplateInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_templates.create(x_connection_token=\"<value>\", unified_marketingautomation_template_input=::OpenApiSDK::Shared::UnifiedMarketingautomationTemplateInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/templates/{id}:
    get:
      operationId: retrieveMarketingautomationTemplate
      summary: Retrieve Templates
      description: Retrieve Templates from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the template you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_40
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.templates.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.templates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_templates.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/users:
    get:
      operationId: listMarketingAutomationUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationUserOutput
      tags: &ref_41
        - marketingautomation/users
      x-speakeasy-group: marketingautomation.users
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listMarketingAutomationUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listMarketingAutomationUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listMarketingAutomationUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_users.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/users/{id}:
    get:
      operationId: retrieveMarketingAutomationUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationUserOutput'
      tags: *ref_41
      x-speakeasy-group: marketingautomation.users
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.marketingautomation.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.marketingautomation_users.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_marketingautomation_user_output.nil?\n  # handle response\nend"
  /ats/activities:
    get:
      operationId: listAtsActivity
      summary: List  Activities
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: &ref_42
        - ats/activities
      x-speakeasy-group: ats.activities
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activities.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Activities.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_activities.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsActivity
      summary: Create Activities
      description: Create Activities in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsActivityInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_42
      x-speakeasy-group: ats.activities
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activities.create({
                xConnectionToken: "<value>",
                unifiedAtsActivityInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.create(x_connection_token="<value>", unified_ats_activity_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAtsActivityInput := components.UnifiedAtsActivityInput{
                    FieldMappings: components.UnifiedAtsActivityInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Activities.Create(ctx, xConnectionToken, unifiedAtsActivityInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_activities.create(x_connection_token=\"<value>\", unified_ats_activity_input=::OpenApiSDK::Shared::UnifiedAtsActivityInput.new(\n    field_mappings: ::OpenApiSDK::Shared::UnifiedAtsActivityInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ats_activity_output.nil?\n  # handle response\nend"
  /ats/activities/{id}:
    get:
      operationId: retrieveAtsActivity
      summary: Retrieve Activities
      description: Retrieve Activities from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the activity you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_42
      x-speakeasy-group: ats.activities
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activities.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.activities.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Activities.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_activities.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_activity_output.nil?\n  # handle response\nend"
  /ats/applications:
    get:
      operationId: listAtsApplication
      summary: List  Applications
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: &ref_43
        - ats/applications
      x-speakeasy-group: ats.applications
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.applications.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Applications.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_applications.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsApplication
      summary: Create Applications
      description: Create Applications in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsApplicationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_43
      x-speakeasy-group: ats.applications
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.applications.create({
                xConnectionToken: "<value>",
                unifiedAtsApplicationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.create(x_connection_token="<value>", unified_ats_application_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAtsApplicationInput := components.UnifiedAtsApplicationInput{
                    FieldMappings: components.UnifiedAtsApplicationInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Applications.Create(ctx, xConnectionToken, unifiedAtsApplicationInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_applications.create(x_connection_token=\"<value>\", unified_ats_application_input=::OpenApiSDK::Shared::UnifiedAtsApplicationInput.new(\n    field_mappings: ::OpenApiSDK::Shared::UnifiedAtsApplicationInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ats_application_output.nil?\n  # handle response\nend"
  /ats/applications/{id}:
    get:
      operationId: retrieveAtsApplication
      summary: Retrieve Applications
      description: Retrieve Applications from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the application you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_43
      x-speakeasy-group: ats.applications
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.applications.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.applications.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Applications.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_applications.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_application_output.nil?\n  # handle response\nend"
  /ats/attachments:
    get:
      operationId: listAtsAttachment
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: &ref_44
        - ats/attachments
      x-speakeasy-group: ats.attachments
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_attachments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsAttachment
      summary: Create Attachments
      description: Create Attachments in any supported ATS software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_44
      x-speakeasy-group: ats.attachments
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachments.create({
                xConnectionToken: "<value>",
                unifiedAtsAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.create(x_connection_token="<value>", unified_ats_attachment_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAtsAttachmentInput := components.UnifiedAtsAttachmentInput{
                    FieldMappings: components.UnifiedAtsAttachmentInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Attachments.Create(ctx, xConnectionToken, unifiedAtsAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_attachments.create(x_connection_token=\"<value>\", unified_ats_attachment_input=::OpenApiSDK::Shared::UnifiedAtsAttachmentInput.new(\n    field_mappings: ::OpenApiSDK::Shared::UnifiedAtsAttachmentInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ats_attachment_output.nil?\n  # handle response\nend"
  /ats/attachments/{id}:
    get:
      operationId: retrieveAtsAttachment
      summary: Retrieve Attachments
      description: Retrieve Attachments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_44
      x-speakeasy-group: ats.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_attachments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_attachment_output.nil?\n  # handle response\nend"
  /ats/candidates:
    get:
      operationId: listAtsCandidate
      summary: List  Candidates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: &ref_45
        - ats/candidates
      x-speakeasy-group: ats.candidates
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidates.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Candidates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_candidates.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsCandidate
      summary: Create Candidates
      description: Create Candidates in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsCandidateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_45
      x-speakeasy-group: ats.candidates
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidates.create({
                xConnectionToken: "<value>",
                unifiedAtsCandidateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.create(x_connection_token="<value>", unified_ats_candidate_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAtsCandidateInput := components.UnifiedAtsCandidateInput{
                    FieldMappings: components.UnifiedAtsCandidateInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Candidates.Create(ctx, xConnectionToken, unifiedAtsCandidateInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_candidates.create(x_connection_token=\"<value>\", unified_ats_candidate_input=::OpenApiSDK::Shared::UnifiedAtsCandidateInput.new(\n    field_mappings: ::OpenApiSDK::Shared::UnifiedAtsCandidateInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ats_candidate_output.nil?\n  # handle response\nend"
  /ats/candidates/{id}:
    get:
      operationId: retrieveAtsCandidate
      summary: Retrieve Candidates
      description: Retrieve Candidates from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the candidate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_45
      x-speakeasy-group: ats.candidates
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidates.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.candidates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Candidates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_candidates.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_candidate_output.nil?\n  # handle response\nend"
  /ats/departments:
    get:
      operationId: listAtsDepartments
      summary: List  Departments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: &ref_46
        - ats/departments
      x-speakeasy-group: ats.departments
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.departments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsDepartments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.departments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsDepartments
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Departments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsDepartments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_departments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/departments/{id}:
    get:
      operationId: retrieveAtsDepartment
      summary: Retrieve Departments
      description: Retrieve Departments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the department you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: *ref_46
      x-speakeasy-group: ats.departments
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.departments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsDepartment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.departments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsDepartment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Departments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsDepartmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsDepartment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_departments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_department_output.nil?\n  # handle response\nend"
  /ats/interviews:
    get:
      operationId: listAtsInterview
      summary: List  Interviews
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: &ref_47
        - ats/interviews
      x-speakeasy-group: ats.interviews
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interviews.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Interviews.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_interviews.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsInterview
      summary: Create Interviews
      description: Create Interviews in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsInterviewInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_47
      x-speakeasy-group: ats.interviews
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interviews.create({
                xConnectionToken: "<value>",
                unifiedAtsInterviewInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.create(x_connection_token="<value>", unified_ats_interview_input={
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAtsInterviewInput := components.UnifiedAtsInterviewInput{
                    FieldMappings: components.UnifiedAtsInterviewInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Interviews.Create(ctx, xConnectionToken, unifiedAtsInterviewInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_interviews.create(x_connection_token=\"<value>\", unified_ats_interview_input=::OpenApiSDK::Shared::UnifiedAtsInterviewInput.new(\n    field_mappings: ::OpenApiSDK::Shared::UnifiedAtsInterviewInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ats_interview_output.nil?\n  # handle response\nend"
  /ats/interviews/{id}:
    get:
      operationId: retrieveAtsInterview
      summary: Retrieve Interviews
      description: Retrieve Interviews from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the interview you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_47
      x-speakeasy-group: ats.interviews
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interviews.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.interviews.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Interviews.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_interviews.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_interview_output.nil?\n  # handle response\nend"
  /ats/jobinterviewstages:
    get:
      operationId: listAtsJobInterviewStage
      summary: List  JobInterviewStages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAtsJobinterviewstageOutput
      tags: &ref_48
        - ats/jobinterviewstages
      x-speakeasy-group: ats.jobinterviewstages
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobinterviewstages.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsJobInterviewStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsJobInterviewStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_jobinterviewstages.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/jobinterviewstages/{id}:
    get:
      operationId: retrieveAtsJobInterviewStage
      summary: Retrieve Job Interview Stages
      description: Retrieve Job Interview Stages from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the jobinterviewstage you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobinterviewstageOutput'
      tags: *ref_48
      x-speakeasy-group: ats.jobinterviewstages
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobinterviewstages.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsJobInterviewStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobinterviewstageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsJobInterviewStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_jobinterviewstages.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_jobinterviewstage_output.nil?\n  # handle response\nend"
  /ats/jobs:
    get:
      operationId: listAtsJob
      summary: List  Jobs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: &ref_49
        - ats/jobs
      x-speakeasy-group: ats.jobs
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobs.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsJob
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsJob
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_jobs.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/jobs/{id}:
    get:
      operationId: retrieveAtsJob
      summary: Retrieve Jobs
      description: Retrieve Jobs from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the job you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: *ref_49
      x-speakeasy-group: ats.jobs
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.jobs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsJob
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsJob
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_jobs.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_job_output.nil?\n  # handle response\nend"
  /ats/offers:
    get:
      operationId: listAtsOffer
      summary: List  Offers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: &ref_50
        - ats/offers
      x-speakeasy-group: ats.offers
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offers.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offers.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsOffer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offers.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsOffer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_offers.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/offers/{id}:
    get:
      operationId: retrieveAtsOffer
      summary: Retrieve Offers
      description: Retrieve Offers from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the offer you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: *ref_50
      x-speakeasy-group: ats.offers
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offers.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsOffer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offers.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfferOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsOffer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_offers.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_offer_output.nil?\n  # handle response\nend"
  /ats/offices:
    get:
      operationId: listAtsOffice
      summary: List Offices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: &ref_51
        - ats/offices
      x-speakeasy-group: ats.offices
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offices.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offices.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsOffice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offices.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsOffice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_offices.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/offices/{id}:
    get:
      operationId: retrieveAtsOffice
      summary: Retrieve Offices
      description: Retrieve Offices from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the office you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: *ref_51
      x-speakeasy-group: ats.offices
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offices.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.offices.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsOffice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offices.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfficeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsOffice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_offices.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_office_output.nil?\n  # handle response\nend"
  /ats/rejectreasons:
    get:
      operationId: listAtsRejectReasons
      summary: List  RejectReasons
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: &ref_52
        - ats/rejectreasons
      x-speakeasy-group: ats.rejectreasons
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.rejectreasons.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsRejectReasons
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.rejectreasons.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsRejectReasons
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsRejectReasons
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_rejectreasons.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/rejectreasons/{id}:
    get:
      operationId: retrieveAtsRejectReason
      summary: Retrieve Reject Reasons
      description: Retrieve Reject Reasons from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the rejectreason you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: *ref_52
      x-speakeasy-group: ats.rejectreasons
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.rejectreasons.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsRejectReason
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.rejectreasons.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsRejectReason
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsRejectreasonOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsRejectReason
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_rejectreasons.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_rejectreason_output.nil?\n  # handle response\nend"
  /ats/scorecards:
    get:
      operationId: listAtsScorecard
      summary: List  ScoreCards
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: &ref_53
        - ats/scorecards
      x-speakeasy-group: ats.scorecards
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.scorecards.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.scorecards.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsScorecard
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Scorecards.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsScorecard
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_scorecards.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/scorecards/{id}:
    get:
      operationId: retrieveAtsScorecard
      summary: Retrieve Score Cards
      description: Retrieve Score Cards from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the scorecard you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: *ref_53
      x-speakeasy-group: ats.scorecards
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.scorecards.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.scorecards.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsScorecard
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Scorecards.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsScorecardOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsScorecard
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_scorecards.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_scorecard_output.nil?\n  # handle response\nend"
  /ats/tags:
    get:
      operationId: listAtsTags
      summary: List  Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: &ref_54
        - ats/tags
      x-speakeasy-group: ats.tags
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.tags.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsTags
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.tags.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsTags
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Tags.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsTags
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_tags.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/tags/{id}:
    get:
      operationId: retrieveAtsTag
      summary: Retrieve Tags
      description: Retrieve Tags from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: *ref_54
      x-speakeasy-group: ats.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.tags.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsTag
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.tags.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Tags.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsTagOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsTag
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_tags.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_tag_output.nil?\n  # handle response\nend"
  /ats/users:
    get:
      operationId: listAtsUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: &ref_55
        - ats/users
      x-speakeasy-group: ats.users
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_users.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/users/{id}:
    get:
      operationId: retrieveAtsUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: *ref_55
      x-speakeasy-group: ats.users
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_users.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_user_output.nil?\n  # handle response\nend"
  /ats/eeocs:
    get:
      operationId: listAtsEeocs
      summary: List  Eeocss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: &ref_56
        - ats/eeocs
      x-speakeasy-group: ats.eeocs
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.eeocs.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.eeocs.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAtsEeocs
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Eeocs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAtsEeocs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_eeocs.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/eeocs/{id}:
    get:
      operationId: retrieveAtsEeocs
      summary: Retrieve Eeocs
      description: Retrieve a eeocs from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the eeocs you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: *ref_56
      x-speakeasy-group: ats.eeocs
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.eeocs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ats.eeocs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsEeocs
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Eeocs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsEeocsOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsEeocs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ats_eeocs.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_eeocs_output.nil?\n  # handle response\nend"
  /accounting/accounts:
    get:
      operationId: listAccountingAccounts
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: &ref_57
        - accounting/accounts
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.accounts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingAccounts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingAccounts
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Accounts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingAccounts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_accounts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAccount
      summary: Create Accounts
      description: Create accounts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAccountInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_57
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.accounts.create({
                xConnectionToken: "<value>",
                unifiedAccountingAccountInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.create(x_connection_token="<value>", unified_accounting_account_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingAccountInput := components.UnifiedAccountingAccountInput{}
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Create(ctx, xConnectionToken, unifiedAccountingAccountInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_accounts.create(x_connection_token=\"<value>\", unified_accounting_account_input=::OpenApiSDK::Shared::UnifiedAccountingAccountInput.new(), remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/accounts/{id}:
    get:
      operationId: retrieveAccountingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_57
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_accounts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/addresses:
    get:
      operationId: listAccountingAddress
      summary: List  Addresss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: &ref_58
        - accounting/addresses
      x-speakeasy-group: accounting.addresses
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.addresses.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.addresses.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingAddress
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Addresses.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_addresses.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/addresses/{id}:
    get:
      operationId: retrieveAccountingAddress
      summary: Retrieve Addresses
      description: Retrieve Addresses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the address you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: *ref_58
      x-speakeasy-group: accounting.addresses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.addresses.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.addresses.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAddress
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Addresses.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAddressOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_addresses.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_address_output.nil?\n  # handle response\nend"
  /accounting/attachments:
    get:
      operationId: listAccountingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingAttachmentOutput
      tags: &ref_59
        - accounting/attachments
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingAttachments
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_attachments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAttachment
      summary: Create Attachments
      description: Create attachments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_59
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachments.create({
                xConnectionToken: "<value>",
                unifiedAccountingAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.create(x_connection_token="<value>", unified_accounting_attachment_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingAttachmentInput := components.UnifiedAccountingAttachmentInput{}
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Create(ctx, xConnectionToken, unifiedAccountingAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_attachments.create(x_connection_token=\"<value>\", unified_accounting_attachment_input=::OpenApiSDK::Shared::UnifiedAccountingAttachmentInput.new(), remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/attachments/{id}:
    get:
      operationId: retrieveAccountingAttachment
      summary: Retrieve Attachments
      description: Retrieve attachments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_59
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_attachments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/balancesheets:
    get:
      operationId: listAccountingBalanceSheets
      summary: List  BalanceSheets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingBalancesheetOutput
      tags: &ref_60
        - accounting/balancesheets
      x-speakeasy-group: accounting.balancesheets
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.balancesheets.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingBalanceSheets
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.balancesheets.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingBalanceSheets
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingBalanceSheets
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_balancesheets.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/balancesheets/{id}:
    get:
      operationId: retrieveAccountingBalanceSheet
      summary: Retrieve BalanceSheets
      description: Retrieve BalanceSheets from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the balancesheet you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingBalancesheetOutput'
      tags: *ref_60
      x-speakeasy-group: accounting.balancesheets
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.balancesheets.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingBalanceSheet
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.balancesheets.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingBalanceSheet
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingBalancesheetOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingBalanceSheet
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_balancesheets.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_balancesheet_output.nil?\n  # handle response\nend"
  /accounting/cashflowstatements:
    get:
      operationId: listAccountingCashflowStatement
      summary: List  CashflowStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCashflowstatementOutput
      tags: &ref_61
        - accounting/cashflowstatements
      x-speakeasy-group: accounting.cashflowstatements
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.cashflowstatements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingCashflowStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_cashflowstatements.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/cashflowstatements/{id}:
    get:
      operationId: retrieveAccountingCashflowStatement
      summary: Retrieve Cashflow Statements
      description: Retrieve Cashflow Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the cashflowstatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCashflowstatementOutput'
      tags: *ref_61
      x-speakeasy-group: accounting.cashflowstatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.cashflowstatements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCashflowStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCashflowstatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_cashflowstatements.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_cashflowstatement_output.nil?\n  # handle response\nend"
  /accounting/companyinfos:
    get:
      operationId: listAccountingCompanyInfos
      summary: List  CompanyInfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCompanyinfoOutput
      tags: &ref_62
        - accounting/companyinfos
      x-speakeasy-group: accounting.companyinfos
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.companyinfos.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingCompanyInfos
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.companyinfos.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingCompanyInfos
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingCompanyInfos
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_companyinfos.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/companyinfos/{id}:
    get:
      operationId: retrieveAccountingCompanyInfo
      summary: Retrieve Company Infos
      description: Retrieve Company Infos from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the companyinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCompanyinfoOutput'
      tags: *ref_62
      x-speakeasy-group: accounting.companyinfos
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.companyinfos.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCompanyInfo
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.companyinfos.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCompanyInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCompanyinfoOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCompanyInfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_companyinfos.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_companyinfo_output.nil?\n  # handle response\nend"
  /accounting/contacts:
    get:
      operationId: listAccountingContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: &ref_63
        - accounting/contacts
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingContacts
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_contacts.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingContact
      summary: Create Contacts
      description: Create contacts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_63
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contacts.create({
                xConnectionToken: "<value>",
                unifiedAccountingContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.create(x_connection_token="<value>", unified_accounting_contact_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingContactInput := components.UnifiedAccountingContactInput{}
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Create(ctx, xConnectionToken, unifiedAccountingContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_contacts.create(x_connection_token=\"<value>\", unified_accounting_contact_input=::OpenApiSDK::Shared::UnifiedAccountingContactInput.new(), remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/contacts/{id}:
    get:
      operationId: retrieveAccountingContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_63
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_contacts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/creditnotes:
    get:
      operationId: listAccountingCreditNote
      summary: List  CreditNotes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCreditnoteOutput
      tags: &ref_64
        - accounting/creditnotes
      x-speakeasy-group: accounting.creditnotes
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.creditnotes.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.creditnotes.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingCreditNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_creditnotes.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/creditnotes/{id}:
    get:
      operationId: retrieveAccountingCreditNote
      summary: Retrieve Credit Notes
      description: Retrieve Credit Notes from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the creditnote you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCreditnoteOutput'
      tags: *ref_64
      x-speakeasy-group: accounting.creditnotes
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.creditnotes.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.creditnotes.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCreditNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCreditnoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_creditnotes.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_creditnote_output.nil?\n  # handle response\nend"
  /accounting/expenses:
    get:
      operationId: listAccountingExpense
      summary: List  Expenses
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: &ref_65
        - accounting/expenses
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expenses.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Expenses.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_expenses.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingExpense
      summary: Create Expenses
      description: Create Expenses in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingExpenseInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_65
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expenses.create({
                xConnectionToken: "<value>",
                unifiedAccountingExpenseInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.create(x_connection_token="<value>", unified_accounting_expense_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingExpenseInput := components.UnifiedAccountingExpenseInput{}
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Create(ctx, xConnectionToken, unifiedAccountingExpenseInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_expenses.create(x_connection_token=\"<value>\", unified_accounting_expense_input=::OpenApiSDK::Shared::UnifiedAccountingExpenseInput.new(), remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/expenses/{id}:
    get:
      operationId: retrieveAccountingExpense
      summary: Retrieve Expenses
      description: Retrieve Expenses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the expense you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_65
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expenses.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.expenses.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_expenses.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/incomestatements:
    get:
      operationId: listAccountingIncomeStatement
      summary: List  IncomeStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingIncomestatementOutput
      tags: &ref_66
        - accounting/incomestatements
      x-speakeasy-group: accounting.incomestatements
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.incomestatements.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.incomestatements.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingIncomeStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_incomestatements.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/incomestatements/{id}:
    get:
      operationId: retrieveAccountingIncomeStatement
      summary: Retrieve Income Statements
      description: Retrieve Income Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the incomestatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingIncomestatementOutput'
      tags: *ref_66
      x-speakeasy-group: accounting.incomestatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.incomestatements.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.incomestatements.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingIncomeStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingIncomestatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_incomestatements.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_incomestatement_output.nil?\n  # handle response\nend"
  /accounting/invoices:
    get:
      operationId: listAccountingInvoice
      summary: List  Invoices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: &ref_67
        - accounting/invoices
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoices.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Invoices.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_invoices.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingInvoice
      summary: Create Invoices
      description: Create invoices in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingInvoiceInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_67
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoices.create({
                xConnectionToken: "<value>",
                unifiedAccountingInvoiceInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.create(x_connection_token="<value>", unified_accounting_invoice_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingInvoiceInput := components.UnifiedAccountingInvoiceInput{}
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Create(ctx, xConnectionToken, unifiedAccountingInvoiceInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_invoices.create(x_connection_token=\"<value>\", unified_accounting_invoice_input=::OpenApiSDK::Shared::UnifiedAccountingInvoiceInput.new(), remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/invoices/{id}:
    get:
      operationId: retrieveAccountingInvoice
      summary: Retrieve Invoices
      description: Retrieve Invoices from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the invoice you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_67
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoices.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.invoices.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_invoices.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/items:
    get:
      operationId: listAccountingItem
      summary: List  Items
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: &ref_68
        - accounting/items
      x-speakeasy-group: accounting.items
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.items.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.items.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingItem
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Items.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_items.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/items/{id}:
    get:
      operationId: retrieveAccountingItem
      summary: Retrieve Items
      description: Retrieve Items from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the item you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: *ref_68
      x-speakeasy-group: accounting.items
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.items.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.items.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingItem
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Items.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingItemOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_items.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_item_output.nil?\n  # handle response\nend"
  /accounting/journalentries:
    get:
      operationId: listAccountingJournalEntry
      summary: List  JournalEntrys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingJournalentryOutput
      tags: &ref_69
        - accounting/journalentries
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentries.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_journalentries.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingJournalEntry
      summary: Create Journal Entries
      description: Create Journal Entries in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingJournalentryInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_69
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentries.create({
                xConnectionToken: "<value>",
                unifiedAccountingJournalentryInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.create(x_connection_token="<value>", unified_accounting_journalentry_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingJournalentryInput := components.UnifiedAccountingJournalentryInput{}
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Create(ctx, xConnectionToken, unifiedAccountingJournalentryInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_journalentries.create(x_connection_token=\"<value>\", unified_accounting_journalentry_input=::OpenApiSDK::Shared::UnifiedAccountingJournalentryInput.new(), remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/journalentries/{id}:
    get:
      operationId: retrieveAccountingJournalEntry
      summary: Retrieve Journal Entries
      description: Retrieve Journal Entries from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the journalentry you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_69
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentries.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.journalentries.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_journalentries.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/payments:
    get:
      operationId: listAccountingPayment
      summary: List  Payments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: &ref_70
        - accounting/payments
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Payments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_payments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPayment
      summary: Create Payments
      description: Create Payments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPaymentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_70
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payments.create({
                xConnectionToken: "<value>",
                unifiedAccountingPaymentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.create(x_connection_token="<value>", unified_accounting_payment_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingPaymentInput := components.UnifiedAccountingPaymentInput{}
                ctx := context.Background()
                res, err := s.Accounting.Payments.Create(ctx, xConnectionToken, unifiedAccountingPaymentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_payments.create(x_connection_token=\"<value>\", unified_accounting_payment_input=::OpenApiSDK::Shared::UnifiedAccountingPaymentInput.new(), remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/payments/{id}:
    get:
      operationId: retrieveAccountingPayment
      summary: Retrieve Payments
      description: Retrieve Payments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the payment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_70
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.payments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Payments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_payments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/phonenumbers:
    get:
      operationId: listAccountingPhonenumber
      summary: List  PhoneNumbers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPhonenumberOutput
      tags: &ref_71
        - accounting/phonenumbers
      x-speakeasy-group: accounting.phonenumbers
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.phonenumbers.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingPhonenumber
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_phonenumbers.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/phonenumbers/{id}:
    get:
      operationId: retrieveAccountingPhonenumber
      summary: Retrieve Phone Numbers
      description: Retrieve Phone Numbers from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the phonenumber you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPhonenumberOutput'
      tags: *ref_71
      x-speakeasy-group: accounting.phonenumbers
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.phonenumbers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPhonenumber
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPhonenumberOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_phonenumbers.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_phonenumber_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders:
    get:
      operationId: listAccountingPurchaseOrder
      summary: List  PurchaseOrders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPurchaseorderOutput
      tags: &ref_72
        - accounting/purchaseorders
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_purchaseorders.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPurchaseOrder
      summary: Create Purchase Orders
      description: Create Purchase Orders in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPurchaseorderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_72
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.create({
                xConnectionToken: "<value>",
                unifiedAccountingPurchaseorderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.create(x_connection_token="<value>", unified_accounting_purchaseorder_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedAccountingPurchaseorderInput := components.UnifiedAccountingPurchaseorderInput{}
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Create(ctx, xConnectionToken, unifiedAccountingPurchaseorderInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_purchaseorders.create(x_connection_token=\"<value>\", unified_accounting_purchaseorder_input=::OpenApiSDK::Shared::UnifiedAccountingPurchaseorderInput.new(), remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders/{id}:
    get:
      operationId: retrieveAccountingPurchaseOrder
      summary: Retrieve Purchase Orders
      description: Retrieve Purchase Orders from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the purchaseorder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_72
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.purchaseorders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_purchaseorders.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/taxrates:
    get:
      operationId: listAccountingTaxRate
      summary: List  TaxRates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: &ref_73
        - accounting/taxrates
      x-speakeasy-group: accounting.taxrates
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.taxrates.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.taxrates.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingTaxRate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Taxrates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_taxrates.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/taxrates/{id}:
    get:
      operationId: retrieveAccountingTaxRate
      summary: Retrieve Tax Rates
      description: Retrieve Tax Rates from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the taxrate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: *ref_73
      x-speakeasy-group: accounting.taxrates
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.taxrates.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.taxrates.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTaxRate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Taxrates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTaxrateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_taxrates.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_taxrate_output.nil?\n  # handle response\nend"
  /accounting/trackingcategories:
    get:
      operationId: listAccountingTrackingCategorys
      summary: List  TrackingCategorys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTrackingcategoryOutput
      tags: &ref_74
        - accounting/trackingcategories
      x-speakeasy-group: accounting.trackingcategories
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingTrackingCategorys
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.trackingcategories.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingTrackingCategorys
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingTrackingCategorys
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_trackingcategories.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/trackingcategories/{id}:
    get:
      operationId: retrieveAccountingTrackingCategory
      summary: Retrieve Tracking Categories
      description: Retrieve Tracking Categories from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the trackingcategory you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTrackingcategoryOutput'
      tags: *ref_74
      x-speakeasy-group: accounting.trackingcategories
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTrackingCategory
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.trackingcategories.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTrackingCategory
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTrackingcategoryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTrackingCategory
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_trackingcategories.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_trackingcategory_output.nil?\n  # handle response\nend"
  /accounting/transactions:
    get:
      operationId: listAccountingTransaction
      summary: List  Transactions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTransactionOutput
      tags: &ref_75
        - accounting/transactions
      x-speakeasy-group: accounting.transactions
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.transactions.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.transactions.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingTransaction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Transactions.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_transactions.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/transactions/{id}:
    get:
      operationId: retrieveAccountingTransaction
      summary: Retrieve Transactions
      description: Retrieve Transactions from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the transaction you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTransactionOutput'
      tags: *ref_75
      x-speakeasy-group: accounting.transactions
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.transactions.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.transactions.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTransaction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Transactions.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTransactionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_transactions.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_transaction_output.nil?\n  # handle response\nend"
  /accounting/vendorcredits:
    get:
      operationId: listAccountingVendorCredit
      summary: List  VendorCredits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingVendorcreditOutput
      tags: &ref_76
        - accounting/vendorcredits
      x-speakeasy-group: accounting.vendorcredits
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.vendorcredits.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listAccountingVendorCredit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_vendorcredits.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/vendorcredits/{id}:
    get:
      operationId: retrieveAccountingVendorCredit
      summary: Retrieve Vendor Credits
      description: Retrieve Vendor Credits from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the vendorcredit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingVendorcreditOutput'
      tags: *ref_76
      x-speakeasy-group: accounting.vendorcredits
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.accounting.vendorcredits.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingVendorCredit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingVendorcreditOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.accounting_vendorcredits.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_accounting_vendorcredit_output.nil?\n  # handle response\nend"
  /filestorage/drives:
    get:
      operationId: listFilestorageDrives
      summary: List  Drives
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: &ref_77
        - filestorage/drives
      x-speakeasy-group: filestorage.drives
      x-codeSamples:
        - lang: typescript
          label: listFilestorageDrives
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.drives.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listFilestorageDrives
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.drives.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listFilestorageDrives
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Drives.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listFilestorageDrives
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_drives.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/drives/{id}:
    get:
      operationId: retrieveFilestorageDrive
      summary: Retrieve Drives
      description: Retrieve Drives from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the drive you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: *ref_77
      x-speakeasy-group: filestorage.drives
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageDrive
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.drives.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageDrive
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.drives.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageDrive
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Drives.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageDriveOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageDrive
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_drives.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_filestorage_drive_output.nil?\n  # handle response\nend"
  /filestorage/files:
    get:
      operationId: listFilestorageFile
      summary: List  Files
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: &ref_78
        - filestorage/files
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Files.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_files.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFile
      summary: Create Files
      description: Create Files in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: true
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFileInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_78
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "<value>",
                  fileUrl: "<value>",
                  mimeType: "<value>",
                  size: "<value>",
                  folderId: "<value>",
                  permission: "<value>",
                  sharedLink: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.create(x_connection_token="<value>", remote_data=False, unified_filestorage_file_input={
                "name": "<value>",
                "file_url": "<value>",
                "mime_type": "<value>",
                "size": "<value>",
                "folder_id": "<value>",
                "permission": "<value>",
                "shared_link": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var remoteData bool = false

                unifiedFilestorageFileInput := components.UnifiedFilestorageFileInput{
                    Name: "<value>",
                    FileURL: "<value>",
                    MimeType: "<value>",
                    Size: "<value>",
                    FolderID: "<value>",
                    Permission: "<value>",
                    SharedLink: "<value>",
                    FieldMappings: components.UnifiedFilestorageFileInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Filestorage.Files.Create(ctx, xConnectionToken, remoteData, unifiedFilestorageFileInput)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_files.create(x_connection_token=\"<value>\", remote_data=false, unified_filestorage_file_input=::OpenApiSDK::Shared::UnifiedFilestorageFileInput.new(\n    name: \"<value>\",\n    file_url: \"<value>\",\n    mime_type: \"<value>\",\n    size: \"<value>\",\n    folder_id: \"<value>\",\n    permission: \"<value>\",\n    shared_link: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedFilestorageFileInputFieldMappings.new(),\n  ))\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /filestorage/files/{id}:
    get:
      operationId: retrieveFilestorageFile
      summary: Retrieve Files
      description: Retrieve Files from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the file you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_78
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.files.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Files.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_files.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /filestorage/folders:
    get:
      operationId: listFilestorageFolder
      summary: List  Folders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: &ref_79
        - filestorage/folders
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Folders.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_folders.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFolder
      summary: Create Folders
      description: Create Folders in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: true
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFolderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_79
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "<value>",
                  size: "<value>",
                  folderUrl: "<value>",
                  description: "Multi-tiered human-resource model",
                  driveId: "<value>",
                  parentFolderId: "<value>",
                  sharedLink: "<value>",
                  permission: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.create(x_connection_token="<value>", remote_data=False, unified_filestorage_folder_input={
                "name": "<value>",
                "size": "<value>",
                "folder_url": "<value>",
                "description": "Multi-tiered human-resource model",
                "drive_id": "<value>",
                "parent_folder_id": "<value>",
                "shared_link": "<value>",
                "permission": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var remoteData bool = false

                unifiedFilestorageFolderInput := components.UnifiedFilestorageFolderInput{
                    Name: "<value>",
                    Size: "<value>",
                    FolderURL: "<value>",
                    Description: "Multi-tiered human-resource model",
                    DriveID: "<value>",
                    ParentFolderID: "<value>",
                    SharedLink: "<value>",
                    Permission: "<value>",
                    FieldMappings: components.UnifiedFilestorageFolderInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Create(ctx, xConnectionToken, remoteData, unifiedFilestorageFolderInput)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_folders.create(x_connection_token=\"<value>\", remote_data=false, unified_filestorage_folder_input=::OpenApiSDK::Shared::UnifiedFilestorageFolderInput.new(\n    name: \"<value>\",\n    size: \"<value>\",\n    folder_url: \"<value>\",\n    description: \"Multi-tiered human-resource model\",\n    drive_id: \"<value>\",\n    parent_folder_id: \"<value>\",\n    shared_link: \"<value>\",\n    permission: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedFilestorageFolderInputFieldMappings.new(),\n  ))\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/folders/{id}:
    get:
      operationId: retrieveFilestorageFolder
      summary: Retrieve Folders
      description: Retrieve Folders from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the folder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_79
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.folders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_folders.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/groups:
    get:
      operationId: listFilestorageGroup
      summary: List  Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: &ref_80
        - filestorage/groups
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.groups.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listFilestorageGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Groups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_groups.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/groups/{id}:
    get:
      operationId: retrieveFilestorageGroup
      summary: Retrieve Groups
      description: Retrieve Groups from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: *ref_80
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.groups.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Groups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageGroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_groups.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_filestorage_group_output.nil?\n  # handle response\nend"
  /filestorage/users:
    get:
      operationId: listFilestorageUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedUserOutput'
      tags: &ref_81
        - filestorage/users
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listFilestorageUsers
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.users.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listFilestorageUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listFilestorageUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_users.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/users/{id}:
    get:
      operationId: retrieveFilestorageUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedUserOutput'
      tags: *ref_81
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageUser
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.filestorage.users.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.filestorage_users.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_user_output.nil?\n  # handle response\nend"
  /ticketing/attachments:
    get:
      operationId: listTicketingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingAttachmentOutput
      tags: &ref_82
        - ticketing/attachments
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listTicketingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.list(x_connection_token="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listTicketingAttachments
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listTicketingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_attachments.list(x_connection_token=\"<value>\", remote_data=false, limit=7685.78, cursor=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingAttachment
      summary: Create Attachments
      description: Create Attachments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_82
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.create(x_connection_token="<value>", unified_ticketing_attachment_input={
                "file_name": "your_file_here",
                "file_url": "<value>",
                "uploader": "<value>",
                "field_mappings": {},
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                unifiedTicketingAttachmentInput := components.UnifiedTicketingAttachmentInput{
                    FileName: "your_file_here",
                    FileURL: "<value>",
                    Uploader: "<value>",
                    FieldMappings: components.UnifiedTicketingAttachmentInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Create(ctx, xConnectionToken, unifiedTicketingAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_attachments.create(x_connection_token=\"<value>\", unified_ticketing_attachment_input=::OpenApiSDK::Shared::UnifiedTicketingAttachmentInput.new(\n    file_name: \"your_file_here\",\n    file_url: \"<value>\",\n    uploader: \"<value>\",\n    field_mappings: ::OpenApiSDK::Shared::UnifiedTicketingAttachmentInputFieldMappings.new(),\n  ), remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
  /ticketing/attachments/{id}:
    get:
      operationId: retrieveTicketingAttachment
      summary: Retrieve Attachments
      description: Retrieve Attachments from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_82
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora()


            res = s.ticketing.attachments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New()
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\n\n    \nres = s.ticketing_attachments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
info:
  title: Panora API
  description: A unified API to ship integrations
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://api.panora.dev
    description: Production server
  - url: https://api-sandbox.panora.dev
    description: Sandbox server
  - url: https://api-dev.panora.dev
    description: Development server
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
  schemas:
    WebhookResponse:
      type: object
      properties:
        id_webhook_endpoint:
          type: string
          nullable: true
          description: The unique UUID of the webhook.
        endpoint_description:
          type: string
          nullable: true
          description: The description of the webhook.
        url:
          type: string
          nullable: true
          description: The endpoint url of the webhook.
        secret:
          type: string
          nullable: true
          description: The secret of the webhook.
        active:
          type: boolean
          nullable: true
          description: The status of the webhook.
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date  of the webhook.
        scope:
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
        id_project:
          type: string
          nullable: true
          description: The project id tied to the webhook.
        last_update:
          format: date-time
          type: string
          nullable: true
          description: The last update date of the webhook.
      required:
        - id_webhook_endpoint
        - endpoint_description
        - url
        - secret
        - active
        - created_at
        - scope
        - id_project
        - last_update
    WebhookDto:
      type: object
      properties:
        url:
          type: string
          nullable: true
          description: The endpoint url of the webhook.
        description:
          type: string
          nullable: true
          description: The description of the webhook.
        scope:
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
      required:
        - url
        - scope
    SignatureVerificationDto:
      type: object
      properties:
        payload:
          type: object
          additionalProperties: true
          nullable: true
          description: The payload event of the webhook.
        signature:
          type: string
          nullable: true
          description: The signature of the webhook.
        secret:
          type: string
          nullable: true
          description: The secret of the webhook.
      required:
        - payload
        - signature
        - secret
    PaginatedDto:
      type: object
      properties:
        prev_cursor:
          type: string
          nullable: true
        next_cursor:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: object
      required:
        - prev_cursor
        - next_cursor
        - data
    UnifiedTicketingCommentInput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          nullable: true
          description: The attachements UUIDs tied to the comment
          type: array
          items:
            type: string
      required:
        - body
    UnifiedTicketingTicketOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the ticket
        status:
          type: string
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: string
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          nullable: true
          description: The tags names of the ticket
          type: array
          items:
            type: string
        completed_at:
          format: date-time
          type: string
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          nullable: true
          description: The attachments UUIDs tied to the ticket
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the ticket
        remote_id:
          type: string
          nullable: true
          description: The id of the ticket in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the ticket in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - description
    UnifiedTicketingTicketInput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the ticket
        status:
          type: string
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: string
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          nullable: true
          description: The tags names of the ticket
          type: array
          items:
            type: string
        completed_at:
          format: date-time
          type: string
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          nullable: true
          description: The attachments UUIDs tied to the ticket
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
    UnifiedTicketingUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the user
        email_address:
          type: string
          nullable: true
          description: The email address of the user
        teams:
          nullable: true
          description: The teams whose the user is part of
          type: array
          items:
            type: string
        account_id:
          type: string
          nullable: true
          description: The account or organization the user is part of
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the user
        remote_id:
          type: string
          nullable: true
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
        - field_mappings
    UnifiedTicketingAccountOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the account
        domains:
          nullable: true
          description: The domains of the account
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the account between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the account
        remote_id:
          type: string
          nullable: true
          description: The id of the account in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the account in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
    UnifiedTicketingContactOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the contact
        email_address:
          type: string
          nullable: true
          description: The email address of the contact
        phone_number:
          type: string
          nullable: true
          description: The phone number of the contact
        details:
          type: string
          nullable: true
          description: The details of the contact
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          description: The UUID of the contact
        remote_id:
          type: string
          nullable: true
          description: The id of the contact in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
    ResyncStatusDto:
      type: object
      properties:
        timestamp:
          format: date-time
          type: string
          nullable: true
        vertical:
          type: string
          nullable: true
        provider:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
      required:
        - timestamp
        - vertical
        - provider
        - status
    Email:
      type: object
      properties:
        email_address:
          type: string
          nullable: true
          description: The email address
        email_address_type:
          type: string
          nullable: true
          description: >-
            The email address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          nullable: true
          description: The owner type of an email
      required:
        - email_address
        - email_address_type
    Address:
      type: object
      properties:
        street_1:
          type: string
          nullable: true
          description: The street
        street_2:
          type: string
          nullable: true
          description: 'More information about the street '
        city:
          type: string
          nullable: true
          description: The city
        state:
          type: string
          nullable: true
          description: The state
        postal_code:
          type: string
          nullable: true
          description: The postal code
        country:
          type: string
          nullable: true
          description: The country
        address_type:
          type: string
          nullable: true
          description: The address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          nullable: true
          description: The owner type of the address
      required:
        - street_1
        - street_2
        - city
        - state
        - postal_code
        - country
        - address_type
        - owner_type
    Phone:
      type: object
      properties:
        phone_number:
          type: string
          nullable: true
          description: >-
            The phone number starting with a plus (+) followed by the country code (e.g +336676778890 for France)
        phone_type:
          type: string
          nullable: true
          description: The phone type. Authorized values are either MOBILE or WORK
        owner_type:
          type: string
          nullable: true
          description: The owner type of a phone number
      required:
        - phone_number
        - phone_type
    UnifiedCrmCompanyOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the company
          nullable: true
        industry:
          type: string
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the company
          nullable: true
        remote_id:
          type: string
          description: The id of the company in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the company in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          description: The modified date of the object
          nullable: true
      required:
        - name
    UnifiedCrmCompanyInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the company
          nullable: true
        industry:
          type: string
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
    UnifiedCrmContactOutput:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          description: The first name of the contact
        last_name:
          type: string
          nullable: true
          description: The last name of the contact
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the contact
        remote_id:
          type: string
          nullable: true
          description: The id of the contact in the context of the Crm 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - first_name
        - last_name
    UnifiedCrmContactInput:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          description: The first name of the contact
        last_name:
          type: string
          nullable: true
          description: The last name of the contact
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - first_name
        - last_name
    UnifiedCrmDealOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the deal
          nullable: true
        description:
          type: string
          description: The description of the deal
          nullable: true
        amount:
          type: number
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the deal
        remote_id:
          type: string
          nullable: true
          description: The id of the deal in the context of the Crm 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the deal in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - description
        - amount
    UnifiedCrmDealInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the deal
          nullable: true
        description:
          type: string
          description: The description of the deal
          nullable: true
        amount:
          type: number
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
        - amount
    UnifiedCrmEngagementOutput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the engagement
        remote_id:
          type: string
          nullable: true
          description: The id of the engagement in the context of the Crm 3rd Party
        remote_data:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The remote data of the engagement in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - type
    UnifiedCrmEngagementInput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - type
    UnifiedCrmNoteOutput:
      type: object
      properties:
        content:
          type: string
          description: The content of the note
          nullable: true
        user_id:
          type: string
          nullable: true
          description: The UUID of the user tied the note
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          nullable: true
          description: The UUID fo the contact tied to the note
        deal_id:
          type: string
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the note
        remote_id:
          type: string
          nullable: true
          description: The id of the note in the context of the Crm 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the note in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - content
    UnifiedCrmNoteInput:
      type: object
      properties:
        content:
          type: string
          description: The content of the note
          nullable: true
        user_id:
          type: string
          nullable: true
          description: The UUID of the user tied the note
        company_id:
          type: string
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          nullable: true
          description: The UUID fo the contact tied to the note
        deal_id:
          type: string
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - content
    UnifiedCrmStageOutput:
      type: object
      properties:
        stage_name:
          type: string
          description: The name of the stage
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the stage between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the stage
          nullable: true
        remote_id:
          type: string
          description: The id of the stage in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the stage in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          description: The modified date of the object
          nullable: true
      required:
        - stage_name
    UnifiedCrmTaskOutput:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the task
          nullable: true
        content:
          type: string
          description: The content of the task
          nullable: true
        status:
          type: string
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          format: date-time
          type: string
          description: The due date of the task
          nullable: true
        finished_date:
          format: date-time
          type: string
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the task
          nullable: true
        remote_id:
          type: string
          description: The id of the task in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the task in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          description: The modified date of the object
          nullable: true
      required:
        - subject
        - content
        - status
    UnifiedCrmTaskInput:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the task
          nullable: true
        content:
          type: string
          description: The content of the task
          nullable: true
        status:
          type: string
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          format: date-time
          type: string
          description: The due date of the task
          nullable: true
        finished_date:
          format: date-time
          type: string
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - subject
        - content
        - status
    UnifiedCrmUserOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
          nullable: true
        email:
          type: string
          description: The email of the user
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the user
          nullable: true
        remote_id:
          type: string
          description: The id of the user in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the user in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          description: The modified date of the object
          nullable: true
      required:
        - name
        - email
    UnifiedTicketingCollectionOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the collection
        description:
          type: string
          nullable: true
          description: The description of the collection
        collection_type:
          type: string
          nullable: true
          description: "The type of the collection. Authorized values are either PROJECT or LIST "
        id:
          type: string
          nullable: true
          description: The UUID of the collection
        remote_id:
          type: string
          nullable: true
          description: The id of the collection in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the collection in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
    UnifiedTicketingCommentOutput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          nullable: true
          description: The attachements UUIDs tied to the comment
          type: array
          items:
            type: string
        id:
          type: string
          nullable: true
          description: The UUID of the comment
        remote_id:
          type: string
          nullable: true
          description: The id of the comment in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the comment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - body
    UnifiedTicketingTagOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the tag
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the tag between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the tag
        remote_id:
          type: string
          nullable: true
          description: The id of the tag in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the tag in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
    UnifiedTicketingTeamOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the team
        description:
          type: string
          nullable: true
          description: The description of the team
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the team between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the team
        remote_id:
          type: string
          nullable: true
          description: The id of the team in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the team in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
    LinkedUserResponse:
      type: object
      properties:
        id_linked_user:
          type: string
          nullable: true
        linked_user_origin_id:
          type: string
          nullable: true
        alias:
          type: string
          nullable: true
        id_project:
          type: string
          nullable: true
      required:
        - id_linked_user
        - linked_user_origin_id
        - alias
        - id_project
    CreateLinkedUserDto:
      type: object
      properties:
        linked_user_origin_id:
          type: string
          nullable: true
        alias:
          type: string
          nullable: true
      required:
        - linked_user_origin_id
        - alias
    CreateBatchLinkedUserDto:
      type: object
      properties:
        linked_user_origin_ids:
          nullable: true
          type: array
          items:
            type: string
        alias:
          type: string
          nullable: true
      required:
        - linked_user_origin_ids
        - alias
    CustomFieldResponse:
      type: object
      properties:
        id_attribute:
          type: string
          nullable: true
          description: Attribute Id
        status:
          type: string
          nullable: true
          description: Attribute Status
        ressource_owner_type:
          type: string
          nullable: true
          description: Attribute Ressource Owner Type
        slug:
          type: string
          nullable: true
          description: Attribute Slug
        description:
          type: string
          nullable: true
          description: Attribute Description
        data_type:
          type: string
          nullable: true
          description: Attribute Data Type
        remote_id:
          type: string
          nullable: true
          description: Attribute Remote Id
        source:
          type: string
          nullable: true
          description: Attribute Source
        id_entity:
          type: string
          nullable: true
          description: Attribute Id Entity
        id_project:
          type: string
          nullable: true
          description: Attribute Id Project
        scope:
          type: string
          nullable: true
          description: Attribute Scope
        id_consumer:
          type: string
          nullable: true
          description: Attribute Id Consumer
        created_at:
          format: date-time
          type: string
          nullable: true
          description: Attribute Created Date
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: Attribute Modified Date
      required:
        - id_attribute
        - status
        - ressource_owner_type
        - slug
        - description
        - data_type
        - remote_id
        - source
        - id_entity
        - id_project
        - scope
        - id_consumer
        - created_at
        - modified_at
    DefineTargetFieldDto:
      type: object
      properties:
        object_type_owner:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        data_type:
          type: string
          nullable: true
      required:
        - object_type_owner
        - name
        - description
        - data_type
    CustomFieldCreateDto:
      type: object
      properties:
        object_type_owner:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        data_type:
          type: string
          nullable: true
        source_custom_field_id:
          type: string
          nullable: true
        source_provider:
          type: string
          nullable: true
        linked_user_id:
          type: string
          nullable: true
      required:
        - object_type_owner
        - name
        - description
        - data_type
        - source_custom_field_id
        - source_provider
        - linked_user_id
    MapFieldToProviderDto:
      type: object
      properties:
        attributeId:
          type: string
          nullable: true
          description: Attribute Id
        source_custom_field_id:
          type: string
          nullable: true
          description: Attribute Id
        source_provider:
          type: string
          nullable: true
          description: Attribute Id
        linked_user_id:
          type: string
          nullable: true
          description: Attribute Id
      required:
        - attributeId
        - source_custom_field_id
        - source_provider
        - linked_user_id
    PassThroughResponse:
      type: object
      properties:
        url:
          type: string
          nullable: true
        status:
          type: number
          nullable: true
        data:
          type: object
          nullable: true
      required:
        - url
        - status
        - data
    PassThroughRequestDto:
      type: object
      properties:
        method:
          enum:
            - GET
            - POST
            - PATCH
            - DELETE
            - PUT
          type: string
        path:
          type: string
          nullable: true
        data:
          oneOf:
            - type: object
              additionalProperties: true
            - type: array
              items:
                type: object
                additionalProperties: true
          nullable: true
        headers:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - method
        - path
    UnifiedHrisBankinfoOutput:
      type: object
      properties: {}
    UnifiedHrisBenefitOutput:
      type: object
      properties: {}
    UnifiedHrisCompanyOutput:
      type: object
      properties: {}
    UnifiedHrisDependentOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeepayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeInput:
      type: object
      properties: {}
    UnifiedHrisEmployerbenefitOutput:
      type: object
      properties: {}
    UnifiedHrisEmploymentOutput:
      type: object
      properties: {}
    UnifiedHrisGroupOutput:
      type: object
      properties: {}
    UnifiedHrisLocationOutput:
      type: object
      properties: {}
    UnifiedHrisPaygroupOutput:
      type: object
      properties: {}
    UnifiedHrisPayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffInput:
      type: object
      properties: {}
    UnifiedHrisTimeoffbalanceOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionInput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationInput:
      type: object
      properties: {}
    UnifiedCampaignOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignInput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactInput:
      type: object
      properties: {}
    UnifiedMarketingautomationEmailOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationEventOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListInput:
      type: object
      properties: {}
    UnifiedMarketingautomationMessageOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateInput:
      type: object
      properties: {}
    UnifiedMarketingautomationUserOutput:
      type: object
      properties: {}
    UnifiedAtsActivityOutput:
      type: object
      properties:
        activity_type:
          type: string
          nullable: true
          description: The type of activity
        subject:
          type: string
          nullable: true
          description: The subject of the activity
        body:
          type: string
          nullable: true
          description: The body of the activity
        visibility:
          type: string
          nullable: true
          description: The visibility of the activity
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the activity
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the activity
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the activity in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the activity in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsActivityInput:
      type: object
      properties:
        activity_type:
          type: string
          nullable: true
          description: The type of activity
        subject:
          type: string
          nullable: true
          description: The subject of the activity
        body:
          type: string
          nullable: true
          description: The body of the activity
        visibility:
          type: string
          nullable: true
          description: The visibility of the activity
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the activity
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsApplicationOutput:
      type: object
      properties:
        applied_at:
          format: date-time
          type: string
          nullable: true
          description: The application date
        rejected_at:
          format: date-time
          type: string
          nullable: true
          description: The rejection date
        offers:
          nullable: true
          description: The offers UUIDs for the application
          type: array
          items:
            type: string
        source:
          type: string
          nullable: true
          description: The source of the application
        credited_to:
          type: string
          nullable: true
          description: The UUID of the person credited for the application
        current_stage:
          type: string
          nullable: true
          description: The UUID of the current stage of the application
        reject_reason:
          type: string
          nullable: true
          description: The rejection reason for the application
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        job_id:
          type: string
          description: The UUID of the job
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the application
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the application in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the application in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote created date of the object
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modified date of the object
    UnifiedAtsApplicationInput:
      type: object
      properties:
        applied_at:
          format: date-time
          type: string
          nullable: true
          description: The application date
        rejected_at:
          format: date-time
          type: string
          nullable: true
          description: The rejection date
        offers:
          nullable: true
          description: The offers UUIDs for the application
          type: array
          items:
            type: string
        source:
          type: string
          nullable: true
          description: The source of the application
        credited_to:
          type: string
          nullable: true
          description: The UUID of the person credited for the application
        current_stage:
          type: string
          nullable: true
          description: The UUID of the current stage of the application
        reject_reason:
          type: string
          nullable: true
          description: The rejection reason for the application
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        job_id:
          type: string
          description: The UUID of the job
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsAttachmentOutput:
      type: object
      properties:
        file_url:
          type: string
          nullable: true
          description: The URL of the file
        file_name:
          type: string
          nullable: true
          description: The name of the file
        attachment_type:
          type: string
          nullable: true
          description: The type of the file
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the attachment
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the attachment
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the attachment
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsAttachmentInput:
      type: object
      properties:
        file_url:
          type: string
          nullable: true
          description: The URL of the file
        file_name:
          type: string
          nullable: true
          description: The name of the file
        attachment_type:
          type: string
          nullable: true
          description: The type of the file
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the attachment
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    Url:
      type: object
      properties:
        url:
          type: string
          nullable: true
          description: The url.
        url_type:
          type: string
          nullable: true
          description: The url type. It takes [WEBSITE | BLOG | LINKEDIN | GITHUB | OTHER]
      required:
        - url
        - url_type
    UnifiedAtsCandidateOutput:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          description: The first name of the candidate
        last_name:
          type: string
          nullable: true
          description: The last name of the candidate
        company:
          type: string
          nullable: true
          description: The company of the candidate
        title:
          type: string
          nullable: true
          description: The title of the candidate
        locations:
          type: string
          nullable: true
          description: The locations of the candidate
        is_private:
          type: boolean
          nullable: true
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          nullable: true
          description: Whether the candidate is reachable by email
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the candidate
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the candidate
        last_interaction_at:
          format: date-time
          type: string
          nullable: true
          description: The last interaction date with the candidate
        attachments:
          nullable: true
          description: The attachments UUIDs of the candidate
          type: array
          items:
            type: string
        applications:
          nullable: true
          description: The applications UUIDs of the candidate
          type: array
          items:
            type: string
        tags:
          nullable: true
          description: The tags of the candidate
          type: array
          items:
            type: string
        urls:
          nullable: true
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          nullable: true
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          nullable: true
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the candidate
        remote_id:
          type: string
          nullable: true
          description: The id of the candidate in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the candidate in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsCandidateInput:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          description: The first name of the candidate
        last_name:
          type: string
          nullable: true
          description: The last name of the candidate
        company:
          type: string
          nullable: true
          description: The company of the candidate
        title:
          type: string
          nullable: true
          description: The title of the candidate
        locations:
          type: string
          nullable: true
          description: The locations of the candidate
        is_private:
          type: boolean
          nullable: true
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          nullable: true
          description: Whether the candidate is reachable by email
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the candidate
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the candidate
        last_interaction_at:
          format: date-time
          type: string
          nullable: true
          description: The last interaction date with the candidate
        attachments:
          nullable: true
          description: The attachments UUIDs of the candidate
          type: array
          items:
            type: string
        applications:
          nullable: true
          description: The applications UUIDs of the candidate
          type: array
          items:
            type: string
        tags:
          nullable: true
          description: The tags of the candidate
          type: array
          items:
            type: string
        urls:
          nullable: true
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          nullable: true
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          nullable: true
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsDepartmentOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the department
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the department
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the department in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the department in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsInterviewOutput:
      type: object
      properties:
        status:
          type: string
          nullable: true
          description: The status of the interview
        application_id:
          type: string
          nullable: true
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          nullable: true
          description: The UUID of the job interview stage
        organized_by:
          type: string
          nullable: true
          description: The UUID of the organizer
        interviewers:
          nullable: true
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          nullable: true
          description: The location of the interview
        start_at:
          format: date-time
          type: string
          nullable: true
          description: The start date and time of the interview
        end_at:
          format: date-time
          type: string
          nullable: true
          description: The end date and time of the interview
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the interview
        remote_updated_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the interview
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the interview
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the interview in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the interview in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsInterviewInput:
      type: object
      properties:
        status:
          type: string
          nullable: true
          description: The status of the interview
        application_id:
          type: string
          nullable: true
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          nullable: true
          description: The UUID of the job interview stage
        organized_by:
          type: string
          nullable: true
          description: The UUID of the organizer
        interviewers:
          nullable: true
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          nullable: true
          description: The location of the interview
        start_at:
          format: date-time
          type: string
          nullable: true
          description: The start date and time of the interview
        end_at:
          format: date-time
          type: string
          nullable: true
          description: The end date and time of the interview
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote creation date of the interview
        remote_updated_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modification date of the interview
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsJobinterviewstageOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the job interview stage
        stage_order:
          type: number
          nullable: true
          description: The order of the stage
        job_id:
          type: string
          nullable: true
          description: The UUID of the job
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the job interview stage
        remote_id:
          type: string
          nullable: true
          description: >-
            The remote ID of the job interview stage in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: >-
            The remote data of the job interview stage in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsJobOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the job
        description:
          type: string
          nullable: true
          description: The description of the job
        code:
          type: string
          nullable: true
          description: The code of the job
        status:
          type: string
          nullable: true
          description: The status of the job
        type:
          type: string
          nullable: true
          description: The type of the job
        confidential:
          type: boolean
          nullable: true
          description: Whether the job is confidential
        departments:
          nullable: true
          description: The departments UUIDs associated with the job
          type: array
          items:
            type: string
        offices:
          nullable: true
          description: The offices UUIDs associated with the job
          type: array
          items:
            type: string
        managers:
          nullable: true
          description: The managers UUIDs associated with the job
          type: array
          items:
            type: string
        recruiters:
          nullable: true
          description: The recruiters UUIDs associated with the job
          type: array
          items:
            type: string
        remote_created_at:
          type: string
          format: date-time
          nullable: true
          description: The remote creation date of the job
        remote_updated_at:
          type: string
          format: date-time
          nullable: true
          description: The remote modification date of the job
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the job
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the job in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the job in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsOfferOutput:
      type: object
      properties:
        created_by:
          type: string
          description: The UUID of the creator
          nullable: true
        remote_created_at:
          format: date-time
          type: string
          description: The remote creation date of the offer
          nullable: true
        closed_at:
          format: date-time
          type: string
          description: The closing date of the offer
          nullable: true
        sent_at:
          format: date-time
          type: string
          description: The sending date of the offer
          nullable: true
        start_date:
          format: date-time
          type: string
          description: The start date of the offer
          nullable: true
        status:
          type: string
          description: The status of the offer
          nullable: true
        application_id:
          type: string
          description: The UUID of the application
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the offer
          nullable: true
        remote_id:
          type: string
          description: The remote ID of the offer in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the offer in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          description: The modified date of the object
          nullable: true
    UnifiedAtsOfficeOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the office
        location:
          type: string
          nullable: true
          description: The location of the office
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          description: The UUID of the office
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the office in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the office in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsRejectreasonOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the reject reason
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the reject reason
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the reject reason in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the reject reason in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsScorecardOutput:
      type: object
      properties:
        overall_recommendation:
          type: string
          nullable: true
          description: The overall recommendation
        application_id:
          type: string
          nullable: true
          description: The UUID of the application
        interview_id:
          type: string
          nullable: true
          description: The UUID of the interview
        remote_created_at:
          type: string
          nullable: true
          description: The remote creation date of the scorecard
        submitted_at:
          type: string
          nullable: true
          description: The submission date of the scorecard
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          description: The UUID of the scorecard
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the scorecard in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the scorecard in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAtsTagOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the tag
        id_ats_candidate:
          type: string
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the tag
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the tag in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the tag in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The creation date of the tag
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modification date of the tag
    UnifiedAtsUserOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
          nullable: true
        last_name:
          type: string
          description: The last name of the user
          nullable: true
        email:
          type: string
          description: The email of the user
          nullable: true
        disabled:
          type: boolean
          description: Whether the user is disabled
          nullable: true
        access_role:
          type: string
          description: The access role of the user
          nullable: true
        remote_created_at:
          format: date-time
          type: string
          description: The remote creation date of the user
          nullable: true
        remote_modified_at:
          format: date-time
          type: string
          description: The remote modification date of the user
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the user
          nullable: true
        remote_id:
          type: string
          description: The remote ID of the user in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the user in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          description: The modified date of the object
          nullable: true
    UnifiedAtsEeocsOutput:
      type: object
      properties:
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
        submitted_at:
          type: string
          format: date-time
          nullable: true
          description: The submission date of the EEOC
        race:
          type: string
          nullable: true
          description: The race of the candidate
        gender:
          type: string
          nullable: true
          description: The gender of the candidate
        veteran_status:
          type: string
          nullable: true
          description: The veteran status of the candidate
        disability_status:
          type: string
          nullable: true
          description: The disability status of the candidate
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the EEOC
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the EEOC in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the EEOC in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
    UnifiedAccountingAccountOutput:
      type: object
      properties: {}
    UnifiedAccountingAccountInput:
      type: object
      properties: {}
    UnifiedAccountingAddressOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentInput:
      type: object
      properties: {}
    UnifiedAccountingBalancesheetOutput:
      type: object
      properties: {}
    UnifiedAccountingCashflowstatementOutput:
      type: object
      properties: {}
    UnifiedAccountingCompanyinfoOutput:
      type: object
      properties: {}
    UnifiedAccountingContactOutput:
      type: object
      properties: {}
    UnifiedAccountingContactInput:
      type: object
      properties: {}
    UnifiedAccountingCreditnoteOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseInput:
      type: object
      properties: {}
    UnifiedAccountingIncomestatementOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceInput:
      type: object
      properties: {}
    UnifiedAccountingItemOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryInput:
      type: object
      properties: {}
    UnifiedAccountingPaymentOutput:
      type: object
      properties: {}
    UnifiedAccountingPaymentInput:
      type: object
      properties: {}
    UnifiedAccountingPhonenumberOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderInput:
      type: object
      properties: {}
    UnifiedAccountingTaxrateOutput:
      type: object
      properties: {}
    UnifiedAccountingTrackingcategoryOutput:
      type: object
      properties: {}
    UnifiedAccountingTransactionOutput:
      type: object
      properties: {}
    UnifiedAccountingVendorcreditOutput:
      type: object
      properties: {}
    UnifiedFilestorageDriveOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the drive
        remote_created_at:
          type: string
          nullable: true
          description: When the third party s drive was created.
        drive_url:
          type: string
          nullable: true
          description: The url of the drive
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the drive
        remote_id:
          type: string
          nullable: true
          description: The id of the drive in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the drive in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - remote_created_at
        - drive_url
    UnifiedFilestorageFileOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the file
          nullable: true
        file_url:
          type: string
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          description: The mime type of the file
          nullable: true
        size:
          type: string
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the file
          nullable: true
        remote_id:
          type: string
          description: The id of the file in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          description: The remote data of the file in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          description: The modified date of the object
          nullable: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    UnifiedFilestorageFileInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the file
          nullable: true
        file_url:
          type: string
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          description: The mime type of the file
          nullable: true
        size:
          type: string
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    UnifiedFilestorageFolderOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the folder
        size:
          type: string
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          nullable: true
          description: The url of the folder
        description:
          type: string
          description: The description of the folder
        drive_id:
          type: string
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the folder
        remote_id:
          type: string
          nullable: true
          description: The id of the folder in the context of the 3rd Party
        remote_data:
          type: object
          additionalProperties: true
          nullable: true
          description: The remote data of the folder in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageFolderInput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the folder
        size:
          type: string
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          nullable: true
          description: The url of the folder
        description:
          type: string
          description: The description of the folder
        drive_id:
          type: string
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageGroupOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the group
        users:
          description: Uuids of users of the group
          type: array
          items:
            type: string
        remote_was_deleted:
          type: boolean
          nullable: true
          description: >-
            Indicates whether or not this object has been deleted in the third party platform.
        field_mappings:
          type: object
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the group
        remote_id:
          type: string
          nullable: true
          description: The id of the group in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the group in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - users
        - remote_was_deleted
    UnifiedUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the user
        email:
          type: string
          nullable: true
          description: The email of the user
        is_me:
          type: boolean
          nullable: true
          description: Whether the user is the one who linked this account.
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the user
        remote_id:
          type: string
          nullable: true
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email
        - is_me
    UnifiedTicketingAttachmentOutput:
      type: object
      properties:
        file_name:
          type: string
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          description: The UUID of the attachment
        remote_id:
          type: string
          nullable: true
          description: The id of the attachment in the context of the 3rd Party
        remote_data:
          type: object
          additionalProperties: true
          nullable: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          description: The modified date of the object
      required:
        - file_name
        - file_url
        - uploader
    UnifiedTicketingAttachmentInput:
      type: object
      properties:
        file_name:
          type: string
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - file_name
        - file_url
        - uploader
security:
  - bearer: []
x-speakeasy-name-override:
  - operationId: ^retrieve.*
    methodNameOverride: retrieve
  - operationId: ^list.*
    methodNameOverride: list
  - operationId: ^create.*
    methodNameOverride: create
